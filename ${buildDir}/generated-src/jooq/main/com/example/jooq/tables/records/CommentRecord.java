/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.tables.Comment;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record9<Long, LocalDateTime, LocalDateTime, String, LocalDateTime, Long, Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.comment.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.comment.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.comment.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.comment.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>taste.comment.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.comment.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>taste.comment.contents</code>.
     */
    public void setContents(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.comment.contents</code>.
     */
    public String getContents() {
        return (String) get(3);
    }

    /**
     * Setter for <code>taste.comment.deleted_at</code>.
     */
    public void setDeletedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>taste.comment.deleted_at</code>.
     */
    public LocalDateTime getDeletedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>taste.comment.board_id</code>.
     */
    public void setBoardId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>taste.comment.board_id</code>.
     */
    public Long getBoardId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>taste.comment.parent_comment</code>.
     */
    public void setParentComment(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>taste.comment.parent_comment</code>.
     */
    public Long getParentComment() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>taste.comment.root_comment</code>.
     */
    public void setRootComment(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>taste.comment.root_comment</code>.
     */
    public Long getRootComment() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>taste.comment.user_id</code>.
     */
    public void setUserId(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>taste.comment.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDateTime, LocalDateTime, String, LocalDateTime, Long, Long, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, LocalDateTime, LocalDateTime, String, LocalDateTime, Long, Long, Long, Long> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Comment.COMMENT.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Comment.COMMENT.UPDATED_AT;
    }

    @Override
    public Field<String> field4() {
        return Comment.COMMENT.CONTENTS;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Comment.COMMENT.DELETED_AT;
    }

    @Override
    public Field<Long> field6() {
        return Comment.COMMENT.BOARD_ID;
    }

    @Override
    public Field<Long> field7() {
        return Comment.COMMENT.PARENT_COMMENT;
    }

    @Override
    public Field<Long> field8() {
        return Comment.COMMENT.ROOT_COMMENT;
    }

    @Override
    public Field<Long> field9() {
        return Comment.COMMENT.USER_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component3() {
        return getUpdatedAt();
    }

    @Override
    public String component4() {
        return getContents();
    }

    @Override
    public LocalDateTime component5() {
        return getDeletedAt();
    }

    @Override
    public Long component6() {
        return getBoardId();
    }

    @Override
    public Long component7() {
        return getParentComment();
    }

    @Override
    public Long component8() {
        return getRootComment();
    }

    @Override
    public Long component9() {
        return getUserId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value3() {
        return getUpdatedAt();
    }

    @Override
    public String value4() {
        return getContents();
    }

    @Override
    public LocalDateTime value5() {
        return getDeletedAt();
    }

    @Override
    public Long value6() {
        return getBoardId();
    }

    @Override
    public Long value7() {
        return getParentComment();
    }

    @Override
    public Long value8() {
        return getRootComment();
    }

    @Override
    public Long value9() {
        return getUserId();
    }

    @Override
    public CommentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public CommentRecord value3(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public CommentRecord value4(String value) {
        setContents(value);
        return this;
    }

    @Override
    public CommentRecord value5(LocalDateTime value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    public CommentRecord value6(Long value) {
        setBoardId(value);
        return this;
    }

    @Override
    public CommentRecord value7(Long value) {
        setParentComment(value);
        return this;
    }

    @Override
    public CommentRecord value8(Long value) {
        setRootComment(value);
        return this;
    }

    @Override
    public CommentRecord value9(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public CommentRecord values(Long value1, LocalDateTime value2, LocalDateTime value3, String value4, LocalDateTime value5, Long value6, Long value7, Long value8, Long value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(Long id, LocalDateTime createdAt, LocalDateTime updatedAt, String contents, LocalDateTime deletedAt, Long boardId, Long parentComment, Long rootComment, Long userId) {
        super(Comment.COMMENT);

        setId(id);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setContents(contents);
        setDeletedAt(deletedAt);
        setBoardId(boardId);
        setParentComment(parentComment);
        setRootComment(rootComment);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(com.example.jooq.tables.pojos.Comment value) {
        super(Comment.COMMENT);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setContents(value.getContents());
            setDeletedAt(value.getDeletedAt());
            setBoardId(value.getBoardId());
            setParentComment(value.getParentComment());
            setRootComment(value.getRootComment());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
