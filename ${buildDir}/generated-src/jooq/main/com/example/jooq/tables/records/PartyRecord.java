/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.enums.PartyPartyStatus;
import com.example.jooq.tables.Party;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyRecord extends UpdatableRecordImpl<PartyRecord> implements Record11<Long, LocalDateTime, String, Boolean, Integer, LocalDate, Integer, PartyPartyStatus, String, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.party.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.party.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.party.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.party.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>taste.party.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.party.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>taste.party.enable_random_matching</code>.
     */
    public void setEnableRandomMatching(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.party.enable_random_matching</code>.
     */
    public Boolean getEnableRandomMatching() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>taste.party.max_members</code>.
     */
    public void setMaxMembers(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>taste.party.max_members</code>.
     */
    public Integer getMaxMembers() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>taste.party.meeting_date</code>.
     */
    public void setMeetingDate(LocalDate value) {
        set(5, value);
    }

    /**
     * Getter for <code>taste.party.meeting_date</code>.
     */
    public LocalDate getMeetingDate() {
        return (LocalDate) get(5);
    }

    /**
     * Setter for <code>taste.party.now_members</code>.
     */
    public void setNowMembers(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>taste.party.now_members</code>.
     */
    public Integer getNowMembers() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>taste.party.party_status</code>.
     */
    public void setPartyStatus(PartyPartyStatus value) {
        set(7, value);
    }

    /**
     * Getter for <code>taste.party.party_status</code>.
     */
    public PartyPartyStatus getPartyStatus() {
        return (PartyPartyStatus) get(7);
    }

    /**
     * Setter for <code>taste.party.title</code>.
     */
    public void setTitle(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>taste.party.title</code>.
     */
    public String getTitle() {
        return (String) get(8);
    }

    /**
     * Setter for <code>taste.party.user_id</code>.
     */
    public void setUserId(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>taste.party.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>taste.party.store_id</code>.
     */
    public void setStoreId(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>taste.party.store_id</code>.
     */
    public Long getStoreId() {
        return (Long) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, LocalDateTime, String, Boolean, Integer, LocalDate, Integer, PartyPartyStatus, String, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, LocalDateTime, String, Boolean, Integer, LocalDate, Integer, PartyPartyStatus, String, Long, Long> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Party.PARTY.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Party.PARTY.CREATED_AT;
    }

    @Override
    public Field<String> field3() {
        return Party.PARTY.DESCRIPTION;
    }

    @Override
    public Field<Boolean> field4() {
        return Party.PARTY.ENABLE_RANDOM_MATCHING;
    }

    @Override
    public Field<Integer> field5() {
        return Party.PARTY.MAX_MEMBERS;
    }

    @Override
    public Field<LocalDate> field6() {
        return Party.PARTY.MEETING_DATE;
    }

    @Override
    public Field<Integer> field7() {
        return Party.PARTY.NOW_MEMBERS;
    }

    @Override
    public Field<PartyPartyStatus> field8() {
        return Party.PARTY.PARTY_STATUS;
    }

    @Override
    public Field<String> field9() {
        return Party.PARTY.TITLE;
    }

    @Override
    public Field<Long> field10() {
        return Party.PARTY.USER_ID;
    }

    @Override
    public Field<Long> field11() {
        return Party.PARTY.STORE_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedAt();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Boolean component4() {
        return getEnableRandomMatching();
    }

    @Override
    public Integer component5() {
        return getMaxMembers();
    }

    @Override
    public LocalDate component6() {
        return getMeetingDate();
    }

    @Override
    public Integer component7() {
        return getNowMembers();
    }

    @Override
    public PartyPartyStatus component8() {
        return getPartyStatus();
    }

    @Override
    public String component9() {
        return getTitle();
    }

    @Override
    public Long component10() {
        return getUserId();
    }

    @Override
    public Long component11() {
        return getStoreId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedAt();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Boolean value4() {
        return getEnableRandomMatching();
    }

    @Override
    public Integer value5() {
        return getMaxMembers();
    }

    @Override
    public LocalDate value6() {
        return getMeetingDate();
    }

    @Override
    public Integer value7() {
        return getNowMembers();
    }

    @Override
    public PartyPartyStatus value8() {
        return getPartyStatus();
    }

    @Override
    public String value9() {
        return getTitle();
    }

    @Override
    public Long value10() {
        return getUserId();
    }

    @Override
    public Long value11() {
        return getStoreId();
    }

    @Override
    public PartyRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PartyRecord value2(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public PartyRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public PartyRecord value4(Boolean value) {
        setEnableRandomMatching(value);
        return this;
    }

    @Override
    public PartyRecord value5(Integer value) {
        setMaxMembers(value);
        return this;
    }

    @Override
    public PartyRecord value6(LocalDate value) {
        setMeetingDate(value);
        return this;
    }

    @Override
    public PartyRecord value7(Integer value) {
        setNowMembers(value);
        return this;
    }

    @Override
    public PartyRecord value8(PartyPartyStatus value) {
        setPartyStatus(value);
        return this;
    }

    @Override
    public PartyRecord value9(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public PartyRecord value10(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public PartyRecord value11(Long value) {
        setStoreId(value);
        return this;
    }

    @Override
    public PartyRecord values(Long value1, LocalDateTime value2, String value3, Boolean value4, Integer value5, LocalDate value6, Integer value7, PartyPartyStatus value8, String value9, Long value10, Long value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PartyRecord
     */
    public PartyRecord() {
        super(Party.PARTY);
    }

    /**
     * Create a detached, initialised PartyRecord
     */
    public PartyRecord(Long id, LocalDateTime createdAt, String description, Boolean enableRandomMatching, Integer maxMembers, LocalDate meetingDate, Integer nowMembers, PartyPartyStatus partyStatus, String title, Long userId, Long storeId) {
        super(Party.PARTY);

        setId(id);
        setCreatedAt(createdAt);
        setDescription(description);
        setEnableRandomMatching(enableRandomMatching);
        setMaxMembers(maxMembers);
        setMeetingDate(meetingDate);
        setNowMembers(nowMembers);
        setPartyStatus(partyStatus);
        setTitle(title);
        setUserId(userId);
        setStoreId(storeId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PartyRecord
     */
    public PartyRecord(com.example.jooq.tables.pojos.Party value) {
        super(Party.PARTY);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setDescription(value.getDescription());
            setEnableRandomMatching(value.getEnableRandomMatching());
            setMaxMembers(value.getMaxMembers());
            setMeetingDate(value.getMeetingDate());
            setNowMembers(value.getNowMembers());
            setPartyStatus(value.getPartyStatus());
            setTitle(value.getTitle());
            setUserId(value.getUserId());
            setStoreId(value.getStoreId());
            resetChangedOnNotNull();
        }
    }
}
