/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.PartyMatchInfoFavorRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyMatchInfoFavor extends TableImpl<PartyMatchInfoFavorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.party_match_info_favor</code>
     */
    public static final PartyMatchInfoFavor PARTY_MATCH_INFO_FAVOR = new PartyMatchInfoFavor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyMatchInfoFavorRecord> getRecordType() {
        return PartyMatchInfoFavorRecord.class;
    }

    /**
     * The column <code>taste.party_match_info_favor.id</code>.
     */
    public final TableField<PartyMatchInfoFavorRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.party_match_info_favor.favor_id</code>.
     */
    public final TableField<PartyMatchInfoFavorRecord, Long> FAVOR_ID = createField(DSL.name("favor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.party_match_info_favor.party_match_info_id</code>.
     */
    public final TableField<PartyMatchInfoFavorRecord, Long> PARTY_MATCH_INFO_ID = createField(DSL.name("party_match_info_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PartyMatchInfoFavor(Name alias, Table<PartyMatchInfoFavorRecord> aliased) {
        this(alias, aliased, null);
    }

    private PartyMatchInfoFavor(Name alias, Table<PartyMatchInfoFavorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.party_match_info_favor</code> table
     * reference
     */
    public PartyMatchInfoFavor(String alias) {
        this(DSL.name(alias), PARTY_MATCH_INFO_FAVOR);
    }

    /**
     * Create an aliased <code>taste.party_match_info_favor</code> table
     * reference
     */
    public PartyMatchInfoFavor(Name alias) {
        this(alias, PARTY_MATCH_INFO_FAVOR);
    }

    /**
     * Create a <code>taste.party_match_info_favor</code> table reference
     */
    public PartyMatchInfoFavor() {
        this(DSL.name("party_match_info_favor"), null);
    }

    public <O extends Record> PartyMatchInfoFavor(Table<O> child, ForeignKey<O, PartyMatchInfoFavorRecord> key) {
        super(child, key, PARTY_MATCH_INFO_FAVOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public UniqueKey<PartyMatchInfoFavorRecord> getPrimaryKey() {
        return Keys.KEY_PARTY_MATCH_INFO_FAVOR_PRIMARY;
    }

    @Override
    public List<ForeignKey<PartyMatchInfoFavorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKDF8KUMDJNHB66XT3CYDK53OM1, Keys.FKJMDMOV29XRFUWX20HIDPP2322);
    }

    private transient Favor _favor;
    private transient PartyMatchInfo _partyMatchInfo;

    /**
     * Get the implicit join path to the <code>taste.favor</code> table.
     */
    public Favor favor() {
        if (_favor == null)
            _favor = new Favor(this, Keys.FKDF8KUMDJNHB66XT3CYDK53OM1);

        return _favor;
    }

    /**
     * Get the implicit join path to the <code>taste.party_match_info</code>
     * table.
     */
    public PartyMatchInfo partyMatchInfo() {
        if (_partyMatchInfo == null)
            _partyMatchInfo = new PartyMatchInfo(this, Keys.FKJMDMOV29XRFUWX20HIDPP2322);

        return _partyMatchInfo;
    }

    @Override
    public PartyMatchInfoFavor as(String alias) {
        return new PartyMatchInfoFavor(DSL.name(alias), this);
    }

    @Override
    public PartyMatchInfoFavor as(Name alias) {
        return new PartyMatchInfoFavor(alias, this);
    }

    @Override
    public PartyMatchInfoFavor as(Table<?> alias) {
        return new PartyMatchInfoFavor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchInfoFavor rename(String name) {
        return new PartyMatchInfoFavor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchInfoFavor rename(Name name) {
        return new PartyMatchInfoFavor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchInfoFavor rename(Table<?> name) {
        return new PartyMatchInfoFavor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
