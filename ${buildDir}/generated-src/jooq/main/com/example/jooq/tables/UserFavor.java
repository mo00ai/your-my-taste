/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.UserFavorRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFavor extends TableImpl<UserFavorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.user_favor</code>
     */
    public static final UserFavor USER_FAVOR = new UserFavor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFavorRecord> getRecordType() {
        return UserFavorRecord.class;
    }

    /**
     * The column <code>taste.user_favor.id</code>.
     */
    public final TableField<UserFavorRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.user_favor.favor_id</code>.
     */
    public final TableField<UserFavorRecord, Long> FAVOR_ID = createField(DSL.name("favor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.user_favor.user_id</code>.
     */
    public final TableField<UserFavorRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserFavor(Name alias, Table<UserFavorRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFavor(Name alias, Table<UserFavorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.user_favor</code> table reference
     */
    public UserFavor(String alias) {
        this(DSL.name(alias), USER_FAVOR);
    }

    /**
     * Create an aliased <code>taste.user_favor</code> table reference
     */
    public UserFavor(Name alias) {
        this(alias, USER_FAVOR);
    }

    /**
     * Create a <code>taste.user_favor</code> table reference
     */
    public UserFavor() {
        this(DSL.name("user_favor"), null);
    }

    public <O extends Record> UserFavor(Table<O> child, ForeignKey<O, UserFavorRecord> key) {
        super(child, key, USER_FAVOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<UserFavorRecord, Long> getIdentity() {
        return (Identity<UserFavorRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserFavorRecord> getPrimaryKey() {
        return Keys.KEY_USER_FAVOR_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserFavorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKFVISAU9PY077YJ8Y9FAETAKQY, Keys.FKIBVFS2851D7LOMPXOLQBJ93LW);
    }

    private transient Favor _favor;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.favor</code> table.
     */
    public Favor favor() {
        if (_favor == null)
            _favor = new Favor(this, Keys.FKFVISAU9PY077YJ8Y9FAETAKQY);

        return _favor;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FKIBVFS2851D7LOMPXOLQBJ93LW);

        return _users;
    }

    @Override
    public UserFavor as(String alias) {
        return new UserFavor(DSL.name(alias), this);
    }

    @Override
    public UserFavor as(Name alias) {
        return new UserFavor(alias, this);
    }

    @Override
    public UserFavor as(Table<?> alias) {
        return new UserFavor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavor rename(String name) {
        return new UserFavor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavor rename(Name name) {
        return new UserFavor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavor rename(Table<?> name) {
        return new UserFavor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
