/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.UsersGender;
import com.example.jooq.enums.UsersLevel;
import com.example.jooq.enums.UsersRole;
import com.example.jooq.tables.Users;
import com.example.jooq.tables.records.UsersRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, com.example.jooq.tables.pojos.Users, Long> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(Users.USERS, com.example.jooq.tables.pojos.Users.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(Users.USERS, com.example.jooq.tables.pojos.Users.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.Users object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchById(Long... values) {
        return fetch(Users.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.Users fetchOneById(Long value) {
        return fetchOne(Users.USERS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Users> fetchOptionalById(Long value) {
        return fetchOptional(Users.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Users.USERS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfDeletedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.DELETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByDeletedAt(LocalDateTime... values) {
        return fetch(Users.USERS.DELETED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Users.USERS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByAddress(String... values) {
        return fetch(Users.USERS.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByAge(Integer... values) {
        return fetch(Users.USERS.AGE, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByEmail(String... values) {
        return fetch(Users.USERS.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public com.example.jooq.tables.pojos.Users fetchOneByEmail(String value) {
        return fetchOne(Users.USERS.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Users> fetchOptionalByEmail(String value) {
        return fetchOptional(Users.USERS.EMAIL, value);
    }

    /**
     * Fetch records that have <code>follower BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfFollower(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.FOLLOWER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>follower IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByFollower(Integer... values) {
        return fetch(Users.USERS.FOLLOWER, values);
    }

    /**
     * Fetch records that have <code>following BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfFollowing(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.FOLLOWING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>following IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByFollowing(Integer... values) {
        return fetch(Users.USERS.FOLLOWING, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfGender(UsersGender lowerInclusive, UsersGender upperInclusive) {
        return fetchRange(Users.USERS.GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByGender(UsersGender... values) {
        return fetch(Users.USERS.GENDER, values);
    }

    /**
     * Fetch records that have <code>level BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfLevel(UsersLevel lowerInclusive, UsersLevel upperInclusive) {
        return fetchRange(Users.USERS.LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>level IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByLevel(UsersLevel... values) {
        return fetch(Users.USERS.LEVEL, values);
    }

    /**
     * Fetch records that have <code>nickname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfNickname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.NICKNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nickname IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByNickname(String... values) {
        return fetch(Users.USERS.NICKNAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByPassword(String... values) {
        return fetch(Users.USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>point BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfPoint(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.POINT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>point IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByPoint(Integer... values) {
        return fetch(Users.USERS.POINT, values);
    }

    /**
     * Fetch records that have <code>posting_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfPostingCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.POSTING_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>posting_count IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByPostingCount(Integer... values) {
        return fetch(Users.USERS.POSTING_COUNT, values);
    }

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfRole(UsersRole lowerInclusive, UsersRole upperInclusive) {
        return fetchRange(Users.USERS.ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByRole(UsersRole... values) {
        return fetch(Users.USERS.ROLE, values);
    }

    /**
     * Fetch records that have <code>image_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchRangeOfImageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.IMAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>image_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Users> fetchByImageId(Long... values) {
        return fetch(Users.USERS.IMAGE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>image_id = value</code>
     */
    public com.example.jooq.tables.pojos.Users fetchOneByImageId(Long value) {
        return fetchOne(Users.USERS.IMAGE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>image_id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Users> fetchOptionalByImageId(Long value) {
        return fetchOptional(Users.USERS.IMAGE_ID, value);
    }
}
