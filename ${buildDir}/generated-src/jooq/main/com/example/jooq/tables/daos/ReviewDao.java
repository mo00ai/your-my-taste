/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.tables.Review;
import com.example.jooq.tables.records.ReviewRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReviewDao extends DAOImpl<ReviewRecord, com.example.jooq.tables.pojos.Review, Long> {

    /**
     * Create a new ReviewDao without any configuration
     */
    public ReviewDao() {
        super(Review.REVIEW, com.example.jooq.tables.pojos.Review.class);
    }

    /**
     * Create a new ReviewDao with an attached configuration
     */
    public ReviewDao(Configuration configuration) {
        super(Review.REVIEW, com.example.jooq.tables.pojos.Review.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.Review object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Review.REVIEW.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchById(Long... values) {
        return fetch(Review.REVIEW.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.Review fetchOneById(Long value) {
        return fetchOne(Review.REVIEW.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Review> fetchOptionalById(Long value) {
        return fetchOptional(Review.REVIEW.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Review.REVIEW.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Review.REVIEW.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Review.REVIEW.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Review.REVIEW.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>contents BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfContents(String lowerInclusive, String upperInclusive) {
        return fetchRange(Review.REVIEW.CONTENTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>contents IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByContents(String... values) {
        return fetch(Review.REVIEW.CONTENTS, values);
    }

    /**
     * Fetch records that have <code>is_presented BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfIsPresented(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Review.REVIEW.IS_PRESENTED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_presented IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByIsPresented(Boolean... values) {
        return fetch(Review.REVIEW.IS_PRESENTED, values);
    }

    /**
     * Fetch records that have <code>is_validated BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfIsValidated(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Review.REVIEW.IS_VALIDATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_validated IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByIsValidated(Boolean... values) {
        return fetch(Review.REVIEW.IS_VALIDATED, values);
    }

    /**
     * Fetch records that have <code>score BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfScore(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Review.REVIEW.SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByScore(Byte... values) {
        return fetch(Review.REVIEW.SCORE, values);
    }

    /**
     * Fetch records that have <code>image_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfImageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Review.REVIEW.IMAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>image_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByImageId(Long... values) {
        return fetch(Review.REVIEW.IMAGE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>image_id = value</code>
     */
    public com.example.jooq.tables.pojos.Review fetchOneByImageId(Long value) {
        return fetchOne(Review.REVIEW.IMAGE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>image_id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Review> fetchOptionalByImageId(Long value) {
        return fetchOptional(Review.REVIEW.IMAGE_ID, value);
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfStoreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Review.REVIEW.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByStoreId(Long... values) {
        return fetch(Review.REVIEW.STORE_ID, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Review.REVIEW.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Review> fetchByUserId(Long... values) {
        return fetch(Review.REVIEW.USER_ID, values);
    }
}
