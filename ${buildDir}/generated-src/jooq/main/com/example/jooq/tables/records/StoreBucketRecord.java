/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.tables.StoreBucket;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreBucketRecord extends UpdatableRecordImpl<StoreBucketRecord> implements Record4<Long, Boolean, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.store_bucket.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.store_bucket.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.store_bucket.is_opened</code>.
     */
    public void setIsOpened(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.store_bucket.is_opened</code>.
     */
    public Boolean getIsOpened() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>taste.store_bucket.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.store_bucket.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>taste.store_bucket.user_id</code>.
     */
    public void setUserId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.store_bucket.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Boolean, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Boolean, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return StoreBucket.STORE_BUCKET.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return StoreBucket.STORE_BUCKET.IS_OPENED;
    }

    @Override
    public Field<String> field3() {
        return StoreBucket.STORE_BUCKET.NAME;
    }

    @Override
    public Field<Long> field4() {
        return StoreBucket.STORE_BUCKET.USER_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getIsOpened();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Long component4() {
        return getUserId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getIsOpened();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Long value4() {
        return getUserId();
    }

    @Override
    public StoreBucketRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public StoreBucketRecord value2(Boolean value) {
        setIsOpened(value);
        return this;
    }

    @Override
    public StoreBucketRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public StoreBucketRecord value4(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public StoreBucketRecord values(Long value1, Boolean value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StoreBucketRecord
     */
    public StoreBucketRecord() {
        super(StoreBucket.STORE_BUCKET);
    }

    /**
     * Create a detached, initialised StoreBucketRecord
     */
    public StoreBucketRecord(Long id, Boolean isOpened, String name, Long userId) {
        super(StoreBucket.STORE_BUCKET);

        setId(id);
        setIsOpened(isOpened);
        setName(name);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StoreBucketRecord
     */
    public StoreBucketRecord(com.example.jooq.tables.pojos.StoreBucket value) {
        super(StoreBucket.STORE_BUCKET);

        if (value != null) {
            setId(value.getId());
            setIsOpened(value.getIsOpened());
            setName(value.getName());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
