/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.CommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>taste.comment.id</code>.
     */
    public final TableField<CommentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.comment.created_at</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.comment.updated_at</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.comment.contents</code>.
     */
    public final TableField<CommentRecord, String> CONTENTS = createField(DSL.name("contents"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.comment.deleted_at</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.comment.board_id</code>.
     */
    public final TableField<CommentRecord, Long> BOARD_ID = createField(DSL.name("board_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.comment.parent_comment</code>.
     */
    public final TableField<CommentRecord, Long> PARENT_COMMENT = createField(DSL.name("parent_comment"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>taste.comment.root_comment</code>.
     */
    public final TableField<CommentRecord, Long> ROOT_COMMENT = createField(DSL.name("root_comment"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>taste.comment.user_id</code>.
     */
    public final TableField<CommentRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>taste.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    /**
     * Create a <code>taste.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<CommentRecord, Long> getIdentity() {
        return (Identity<CommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKLIJ9OOR1NAV89JEAT35S6KBP1, Keys.FKK5DGRGAXQ2CNQQO788R2GYSXO, Keys.FK1O5NI2RC96HM68W7UIUXATN12, Keys.FKQM52P1V3O13HY268HE0WCNGR5);
    }

    private transient Board _board;
    private transient Comment _fkk5dgrgaxq2cnqqo788r2gysxo;
    private transient Comment _fk1o5ni2rc96hm68w7uiuxatn12;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.board</code> table.
     */
    public Board board() {
        if (_board == null)
            _board = new Board(this, Keys.FKLIJ9OOR1NAV89JEAT35S6KBP1);

        return _board;
    }

    /**
     * Get the implicit join path to the <code>taste.comment</code> table, via
     * the <code>FKk5dgrgaxq2cnqqo788r2gysxo</code> key.
     */
    public Comment fkk5dgrgaxq2cnqqo788r2gysxo() {
        if (_fkk5dgrgaxq2cnqqo788r2gysxo == null)
            _fkk5dgrgaxq2cnqqo788r2gysxo = new Comment(this, Keys.FKK5DGRGAXQ2CNQQO788R2GYSXO);

        return _fkk5dgrgaxq2cnqqo788r2gysxo;
    }

    /**
     * Get the implicit join path to the <code>taste.comment</code> table, via
     * the <code>FK1o5ni2rc96hm68w7uiuxatn12</code> key.
     */
    public Comment fk1o5ni2rc96hm68w7uiuxatn12() {
        if (_fk1o5ni2rc96hm68w7uiuxatn12 == null)
            _fk1o5ni2rc96hm68w7uiuxatn12 = new Comment(this, Keys.FK1O5NI2RC96HM68W7UIUXATN12);

        return _fk1o5ni2rc96hm68w7uiuxatn12;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FKQM52P1V3O13HY268HE0WCNGR5);

        return _users;
    }

    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    @Override
    public Comment as(Table<?> alias) {
        return new Comment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Table<?> name) {
        return new Comment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDateTime, LocalDateTime, String, LocalDateTime, Long, Long, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
