/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.NotificationInfoCategory;
import com.example.jooq.tables.records.NotificationInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationInfo extends TableImpl<NotificationInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.notification_info</code>
     */
    public static final NotificationInfo NOTIFICATION_INFO = new NotificationInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationInfoRecord> getRecordType() {
        return NotificationInfoRecord.class;
    }

    /**
     * The column <code>taste.notification_info.id</code>.
     */
    public final TableField<NotificationInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.notification_info.created_at</code>.
     */
    public final TableField<NotificationInfoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.notification_info.updated_at</code>.
     */
    public final TableField<NotificationInfoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.notification_info.category</code>.
     */
    public final TableField<NotificationInfoRecord, NotificationInfoCategory> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(com.example.jooq.enums.NotificationInfoCategory.class), this, "");

    /**
     * The column <code>taste.notification_info.is_read</code>.
     */
    public final TableField<NotificationInfoRecord, Boolean> IS_READ = createField(DSL.name("is_read"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>taste.notification_info.notification_content_id</code>.
     */
    public final TableField<NotificationInfoRecord, Long> NOTIFICATION_CONTENT_ID = createField(DSL.name("notification_content_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.notification_info.notification_target</code>.
     */
    public final TableField<NotificationInfoRecord, Long> NOTIFICATION_TARGET = createField(DSL.name("notification_target"), SQLDataType.BIGINT.nullable(false), this, "");

    private NotificationInfo(Name alias, Table<NotificationInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationInfo(Name alias, Table<NotificationInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.notification_info</code> table reference
     */
    public NotificationInfo(String alias) {
        this(DSL.name(alias), NOTIFICATION_INFO);
    }

    /**
     * Create an aliased <code>taste.notification_info</code> table reference
     */
    public NotificationInfo(Name alias) {
        this(alias, NOTIFICATION_INFO);
    }

    /**
     * Create a <code>taste.notification_info</code> table reference
     */
    public NotificationInfo() {
        this(DSL.name("notification_info"), null);
    }

    public <O extends Record> NotificationInfo(Table<O> child, ForeignKey<O, NotificationInfoRecord> key) {
        super(child, key, NOTIFICATION_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public UniqueKey<NotificationInfoRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_INFO_PRIMARY;
    }

    @Override
    public List<ForeignKey<NotificationInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKPB3KNRBEKAD3NAMOGSK229SOD, Keys.FKFV5V471G6R1LAK3GU0SMNJKHI);
    }

    private transient NotificationContent _notificationContent;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.notification_content</code>
     * table.
     */
    public NotificationContent notificationContent() {
        if (_notificationContent == null)
            _notificationContent = new NotificationContent(this, Keys.FKPB3KNRBEKAD3NAMOGSK229SOD);

        return _notificationContent;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FKFV5V471G6R1LAK3GU0SMNJKHI);

        return _users;
    }

    @Override
    public NotificationInfo as(String alias) {
        return new NotificationInfo(DSL.name(alias), this);
    }

    @Override
    public NotificationInfo as(Name alias) {
        return new NotificationInfo(alias, this);
    }

    @Override
    public NotificationInfo as(Table<?> alias) {
        return new NotificationInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInfo rename(String name) {
        return new NotificationInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInfo rename(Name name) {
        return new NotificationInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInfo rename(Table<?> name) {
        return new NotificationInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, LocalDateTime, NotificationInfoCategory, Boolean, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super NotificationInfoCategory, ? super Boolean, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super NotificationInfoCategory, ? super Boolean, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
