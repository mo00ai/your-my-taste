/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.BucketItemRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BucketItem extends TableImpl<BucketItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.bucket_item</code>
     */
    public static final BucketItem BUCKET_ITEM = new BucketItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BucketItemRecord> getRecordType() {
        return BucketItemRecord.class;
    }

    /**
     * The column <code>taste.bucket_item.id</code>.
     */
    public final TableField<BucketItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.bucket_item.store_id</code>.
     */
    public final TableField<BucketItemRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.bucket_item.bucket_id</code>.
     */
    public final TableField<BucketItemRecord, Long> BUCKET_ID = createField(DSL.name("bucket_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BucketItem(Name alias, Table<BucketItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private BucketItem(Name alias, Table<BucketItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.bucket_item</code> table reference
     */
    public BucketItem(String alias) {
        this(DSL.name(alias), BUCKET_ITEM);
    }

    /**
     * Create an aliased <code>taste.bucket_item</code> table reference
     */
    public BucketItem(Name alias) {
        this(alias, BUCKET_ITEM);
    }

    /**
     * Create a <code>taste.bucket_item</code> table reference
     */
    public BucketItem() {
        this(DSL.name("bucket_item"), null);
    }

    public <O extends Record> BucketItem(Table<O> child, ForeignKey<O, BucketItemRecord> key) {
        super(child, key, BUCKET_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<BucketItemRecord, Long> getIdentity() {
        return (Identity<BucketItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BucketItemRecord> getPrimaryKey() {
        return Keys.KEY_BUCKET_ITEM_PRIMARY;
    }

    @Override
    public List<ForeignKey<BucketItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKPJ3NSIWNBEL3DOUQT357P5J5J, Keys.FK7V0L122K2JV00SJ7YC3CVE69D);
    }

    private transient Store _store;
    private transient StoreBucket _storeBucket;

    /**
     * Get the implicit join path to the <code>taste.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.FKPJ3NSIWNBEL3DOUQT357P5J5J);

        return _store;
    }

    /**
     * Get the implicit join path to the <code>taste.store_bucket</code> table.
     */
    public StoreBucket storeBucket() {
        if (_storeBucket == null)
            _storeBucket = new StoreBucket(this, Keys.FK7V0L122K2JV00SJ7YC3CVE69D);

        return _storeBucket;
    }

    @Override
    public BucketItem as(String alias) {
        return new BucketItem(DSL.name(alias), this);
    }

    @Override
    public BucketItem as(Name alias) {
        return new BucketItem(alias, this);
    }

    @Override
    public BucketItem as(Table<?> alias) {
        return new BucketItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BucketItem rename(String name) {
        return new BucketItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BucketItem rename(Name name) {
        return new BucketItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BucketItem rename(Table<?> name) {
        return new BucketItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
