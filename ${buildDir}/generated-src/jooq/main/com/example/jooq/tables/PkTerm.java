/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.PkTermRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkTerm extends TableImpl<PkTermRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.pk_term</code>
     */
    public static final PkTerm PK_TERM = new PkTerm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PkTermRecord> getRecordType() {
        return PkTermRecord.class;
    }

    /**
     * The column <code>taste.pk_term.id</code>.
     */
    public final TableField<PkTermRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.pk_term.end_date</code>.
     */
    public final TableField<PkTermRecord, LocalDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>taste.pk_term.start_date</code>.
     */
    public final TableField<PkTermRecord, LocalDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>taste.pk_term.term</code>.
     */
    public final TableField<PkTermRecord, Integer> TERM = createField(DSL.name("term"), SQLDataType.INTEGER.nullable(false), this, "");

    private PkTerm(Name alias, Table<PkTermRecord> aliased) {
        this(alias, aliased, null);
    }

    private PkTerm(Name alias, Table<PkTermRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.pk_term</code> table reference
     */
    public PkTerm(String alias) {
        this(DSL.name(alias), PK_TERM);
    }

    /**
     * Create an aliased <code>taste.pk_term</code> table reference
     */
    public PkTerm(Name alias) {
        this(alias, PK_TERM);
    }

    /**
     * Create a <code>taste.pk_term</code> table reference
     */
    public PkTerm() {
        this(DSL.name("pk_term"), null);
    }

    public <O extends Record> PkTerm(Table<O> child, ForeignKey<O, PkTermRecord> key) {
        super(child, key, PK_TERM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<PkTermRecord, Long> getIdentity() {
        return (Identity<PkTermRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PkTermRecord> getPrimaryKey() {
        return Keys.KEY_PK_TERM_PRIMARY;
    }

    @Override
    public PkTerm as(String alias) {
        return new PkTerm(DSL.name(alias), this);
    }

    @Override
    public PkTerm as(Name alias) {
        return new PkTerm(alias, this);
    }

    @Override
    public PkTerm as(Table<?> alias) {
        return new PkTerm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PkTerm rename(String name) {
        return new PkTerm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkTerm rename(Name name) {
        return new PkTerm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkTerm rename(Table<?> name) {
        return new PkTerm(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
