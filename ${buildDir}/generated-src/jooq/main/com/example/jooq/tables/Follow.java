/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.FollowRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Follow extends TableImpl<FollowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.follow</code>
     */
    public static final Follow FOLLOW = new Follow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FollowRecord> getRecordType() {
        return FollowRecord.class;
    }

    /**
     * The column <code>taste.follow.id</code>.
     */
    public final TableField<FollowRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.follow.follower_id</code>.
     */
    public final TableField<FollowRecord, Long> FOLLOWER_ID = createField(DSL.name("follower_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.follow.following_id</code>.
     */
    public final TableField<FollowRecord, Long> FOLLOWING_ID = createField(DSL.name("following_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Follow(Name alias, Table<FollowRecord> aliased) {
        this(alias, aliased, null);
    }

    private Follow(Name alias, Table<FollowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.follow</code> table reference
     */
    public Follow(String alias) {
        this(DSL.name(alias), FOLLOW);
    }

    /**
     * Create an aliased <code>taste.follow</code> table reference
     */
    public Follow(Name alias) {
        this(alias, FOLLOW);
    }

    /**
     * Create a <code>taste.follow</code> table reference
     */
    public Follow() {
        this(DSL.name("follow"), null);
    }

    public <O extends Record> Follow(Table<O> child, ForeignKey<O, FollowRecord> key) {
        super(child, key, FOLLOW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<FollowRecord, Long> getIdentity() {
        return (Identity<FollowRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FollowRecord> getPrimaryKey() {
        return Keys.KEY_FOLLOW_PRIMARY;
    }

    @Override
    public List<ForeignKey<FollowRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKJIKG34TXCXNHCKY26W14FVFCC, Keys.FK9OQSJOVU9BL95DWT8IBIY2OEY);
    }

    private transient Users _fkjikg34txcxnhcky26w14fvfcc;
    private transient Users _fk9oqsjovu9bl95dwt8ibiy2oey;

    /**
     * Get the implicit join path to the <code>taste.users</code> table, via the
     * <code>FKjikg34txcxnhcky26w14fvfcc</code> key.
     */
    public Users fkjikg34txcxnhcky26w14fvfcc() {
        if (_fkjikg34txcxnhcky26w14fvfcc == null)
            _fkjikg34txcxnhcky26w14fvfcc = new Users(this, Keys.FKJIKG34TXCXNHCKY26W14FVFCC);

        return _fkjikg34txcxnhcky26w14fvfcc;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table, via the
     * <code>FK9oqsjovu9bl95dwt8ibiy2oey</code> key.
     */
    public Users fk9oqsjovu9bl95dwt8ibiy2oey() {
        if (_fk9oqsjovu9bl95dwt8ibiy2oey == null)
            _fk9oqsjovu9bl95dwt8ibiy2oey = new Users(this, Keys.FK9OQSJOVU9BL95DWT8IBIY2OEY);

        return _fk9oqsjovu9bl95dwt8ibiy2oey;
    }

    @Override
    public Follow as(String alias) {
        return new Follow(DSL.name(alias), this);
    }

    @Override
    public Follow as(Name alias) {
        return new Follow(alias, this);
    }

    @Override
    public Follow as(Table<?> alias) {
        return new Follow(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(String name) {
        return new Follow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(Name name) {
        return new Follow(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(Table<?> name) {
        return new Follow(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
