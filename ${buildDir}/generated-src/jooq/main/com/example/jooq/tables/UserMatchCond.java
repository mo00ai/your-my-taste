/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.UserMatchCondGender;
import com.example.jooq.enums.UserMatchCondMatchingStatus;
import com.example.jooq.tables.records.UserMatchCondRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchCond extends TableImpl<UserMatchCondRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.user_match_cond</code>
     */
    public static final UserMatchCond USER_MATCH_COND = new UserMatchCond();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMatchCondRecord> getRecordType() {
        return UserMatchCondRecord.class;
    }

    /**
     * The column <code>taste.user_match_cond.id</code>.
     */
    public final TableField<UserMatchCondRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.user_match_cond.created_at</code>.
     */
    public final TableField<UserMatchCondRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.user_match_cond.age_max_range</code>.
     */
    public final TableField<UserMatchCondRecord, Integer> AGE_MAX_RANGE = createField(DSL.name("age_max_range"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.user_match_cond.age_min_range</code>.
     */
    public final TableField<UserMatchCondRecord, Integer> AGE_MIN_RANGE = createField(DSL.name("age_min_range"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.user_match_cond.gender</code>.
     */
    public final TableField<UserMatchCondRecord, UserMatchCondGender> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(6).asEnumDataType(com.example.jooq.enums.UserMatchCondGender.class), this, "");

    /**
     * The column <code>taste.user_match_cond.matching_status</code>.
     */
    public final TableField<UserMatchCondRecord, UserMatchCondMatchingStatus> MATCHING_STATUS = createField(DSL.name("matching_status"), SQLDataType.VARCHAR(12).asEnumDataType(com.example.jooq.enums.UserMatchCondMatchingStatus.class), this, "");

    /**
     * The column <code>taste.user_match_cond.region</code>.
     */
    public final TableField<UserMatchCondRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>taste.user_match_cond.user_id</code>.
     */
    public final TableField<UserMatchCondRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserMatchCond(Name alias, Table<UserMatchCondRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMatchCond(Name alias, Table<UserMatchCondRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.user_match_cond</code> table reference
     */
    public UserMatchCond(String alias) {
        this(DSL.name(alias), USER_MATCH_COND);
    }

    /**
     * Create an aliased <code>taste.user_match_cond</code> table reference
     */
    public UserMatchCond(Name alias) {
        this(alias, USER_MATCH_COND);
    }

    /**
     * Create a <code>taste.user_match_cond</code> table reference
     */
    public UserMatchCond() {
        this(DSL.name("user_match_cond"), null);
    }

    public <O extends Record> UserMatchCond(Table<O> child, ForeignKey<O, UserMatchCondRecord> key) {
        super(child, key, USER_MATCH_COND);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<UserMatchCondRecord, Long> getIdentity() {
        return (Identity<UserMatchCondRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserMatchCondRecord> getPrimaryKey() {
        return Keys.KEY_USER_MATCH_COND_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserMatchCondRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKDVC9QKLD0TEGW5IN7Q3DL9CHX);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FKDVC9QKLD0TEGW5IN7Q3DL9CHX);

        return _users;
    }

    @Override
    public UserMatchCond as(String alias) {
        return new UserMatchCond(DSL.name(alias), this);
    }

    @Override
    public UserMatchCond as(Name alias) {
        return new UserMatchCond(alias, this);
    }

    @Override
    public UserMatchCond as(Table<?> alias) {
        return new UserMatchCond(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCond rename(String name) {
        return new UserMatchCond(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCond rename(Name name) {
        return new UserMatchCond(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCond rename(Table<?> name) {
        return new UserMatchCond(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDateTime, Integer, Integer, UserMatchCondGender, UserMatchCondMatchingStatus, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super UserMatchCondGender, ? super UserMatchCondMatchingStatus, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super UserMatchCondGender, ? super UserMatchCondMatchingStatus, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
