/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.StoreBucketRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreBucket extends TableImpl<StoreBucketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.store_bucket</code>
     */
    public static final StoreBucket STORE_BUCKET = new StoreBucket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoreBucketRecord> getRecordType() {
        return StoreBucketRecord.class;
    }

    /**
     * The column <code>taste.store_bucket.id</code>.
     */
    public final TableField<StoreBucketRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.store_bucket.is_opened</code>.
     */
    public final TableField<StoreBucketRecord, Boolean> IS_OPENED = createField(DSL.name("is_opened"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>taste.store_bucket.name</code>.
     */
    public final TableField<StoreBucketRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.store_bucket.user_id</code>.
     */
    public final TableField<StoreBucketRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private StoreBucket(Name alias, Table<StoreBucketRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoreBucket(Name alias, Table<StoreBucketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.store_bucket</code> table reference
     */
    public StoreBucket(String alias) {
        this(DSL.name(alias), STORE_BUCKET);
    }

    /**
     * Create an aliased <code>taste.store_bucket</code> table reference
     */
    public StoreBucket(Name alias) {
        this(alias, STORE_BUCKET);
    }

    /**
     * Create a <code>taste.store_bucket</code> table reference
     */
    public StoreBucket() {
        this(DSL.name("store_bucket"), null);
    }

    public <O extends Record> StoreBucket(Table<O> child, ForeignKey<O, StoreBucketRecord> key) {
        super(child, key, STORE_BUCKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<StoreBucketRecord, Long> getIdentity() {
        return (Identity<StoreBucketRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StoreBucketRecord> getPrimaryKey() {
        return Keys.KEY_STORE_BUCKET_PRIMARY;
    }

    @Override
    public List<ForeignKey<StoreBucketRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKK3YHB1QMLMBSK3WRHFUNKSS8G);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FKK3YHB1QMLMBSK3WRHFUNKSS8G);

        return _users;
    }

    @Override
    public StoreBucket as(String alias) {
        return new StoreBucket(DSL.name(alias), this);
    }

    @Override
    public StoreBucket as(Name alias) {
        return new StoreBucket(alias, this);
    }

    @Override
    public StoreBucket as(Table<?> alias) {
        return new StoreBucket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreBucket rename(String name) {
        return new StoreBucket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreBucket rename(Name name) {
        return new StoreBucket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreBucket rename(Table<?> name) {
        return new StoreBucket(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Boolean, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Boolean, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Boolean, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
