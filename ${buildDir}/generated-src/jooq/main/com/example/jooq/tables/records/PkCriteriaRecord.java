/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.enums.PkCriteriaType;
import com.example.jooq.tables.PkCriteria;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkCriteriaRecord extends UpdatableRecordImpl<PkCriteriaRecord> implements Record4<Long, Boolean, Integer, PkCriteriaType> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.pk_criteria.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.pk_criteria.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.pk_criteria.is_active</code>.
     */
    public void setIsActive(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.pk_criteria.is_active</code>.
     */
    public Boolean getIsActive() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>taste.pk_criteria.point</code>.
     */
    public void setPoint(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.pk_criteria.point</code>.
     */
    public Integer getPoint() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>taste.pk_criteria.type</code>.
     */
    public void setType(PkCriteriaType value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.pk_criteria.type</code>.
     */
    public PkCriteriaType getType() {
        return (PkCriteriaType) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Boolean, Integer, PkCriteriaType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Boolean, Integer, PkCriteriaType> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PkCriteria.PK_CRITERIA.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return PkCriteria.PK_CRITERIA.IS_ACTIVE;
    }

    @Override
    public Field<Integer> field3() {
        return PkCriteria.PK_CRITERIA.POINT;
    }

    @Override
    public Field<PkCriteriaType> field4() {
        return PkCriteria.PK_CRITERIA.TYPE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getIsActive();
    }

    @Override
    public Integer component3() {
        return getPoint();
    }

    @Override
    public PkCriteriaType component4() {
        return getType();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getIsActive();
    }

    @Override
    public Integer value3() {
        return getPoint();
    }

    @Override
    public PkCriteriaType value4() {
        return getType();
    }

    @Override
    public PkCriteriaRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PkCriteriaRecord value2(Boolean value) {
        setIsActive(value);
        return this;
    }

    @Override
    public PkCriteriaRecord value3(Integer value) {
        setPoint(value);
        return this;
    }

    @Override
    public PkCriteriaRecord value4(PkCriteriaType value) {
        setType(value);
        return this;
    }

    @Override
    public PkCriteriaRecord values(Long value1, Boolean value2, Integer value3, PkCriteriaType value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PkCriteriaRecord
     */
    public PkCriteriaRecord() {
        super(PkCriteria.PK_CRITERIA);
    }

    /**
     * Create a detached, initialised PkCriteriaRecord
     */
    public PkCriteriaRecord(Long id, Boolean isActive, Integer point, PkCriteriaType type) {
        super(PkCriteria.PK_CRITERIA);

        setId(id);
        setIsActive(isActive);
        setPoint(point);
        setType(type);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PkCriteriaRecord
     */
    public PkCriteriaRecord(com.example.jooq.tables.pojos.PkCriteria value) {
        super(PkCriteria.PK_CRITERIA);

        if (value != null) {
            setId(value.getId());
            setIsActive(value.getIsActive());
            setPoint(value.getPoint());
            setType(value.getType());
            resetChangedOnNotNull();
        }
    }
}
