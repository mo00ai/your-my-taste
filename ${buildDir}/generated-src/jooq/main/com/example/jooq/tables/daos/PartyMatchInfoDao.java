/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.PartyMatchInfoGender;
import com.example.jooq.enums.PartyMatchInfoMatchStatus;
import com.example.jooq.tables.PartyMatchInfo;
import com.example.jooq.tables.records.PartyMatchInfoRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyMatchInfoDao extends DAOImpl<PartyMatchInfoRecord, com.example.jooq.tables.pojos.PartyMatchInfo, Long> {

    /**
     * Create a new PartyMatchInfoDao without any configuration
     */
    public PartyMatchInfoDao() {
        super(PartyMatchInfo.PARTY_MATCH_INFO, com.example.jooq.tables.pojos.PartyMatchInfo.class);
    }

    /**
     * Create a new PartyMatchInfoDao with an attached configuration
     */
    public PartyMatchInfoDao(Configuration configuration) {
        super(PartyMatchInfo.PARTY_MATCH_INFO, com.example.jooq.tables.pojos.PartyMatchInfo.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.PartyMatchInfo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchById(Long... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.PartyMatchInfo fetchOneById(Long value) {
        return fetchOne(PartyMatchInfo.PARTY_MATCH_INFO.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.PartyMatchInfo> fetchOptionalById(Long value) {
        return fetchOptional(PartyMatchInfo.PARTY_MATCH_INFO.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>max_age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfMaxAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.MAX_AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_age IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByMaxAge(Integer... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.MAX_AGE, values);
    }

    /**
     * Fetch records that have <code>min_age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfMinAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.MIN_AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>min_age IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByMinAge(Integer... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.MIN_AGE, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfGender(PartyMatchInfoGender lowerInclusive, PartyMatchInfoGender upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByGender(PartyMatchInfoGender... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.GENDER, values);
    }

    /**
     * Fetch records that have <code>match_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfMatchStatus(PartyMatchInfoMatchStatus lowerInclusive, PartyMatchInfoMatchStatus upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.MATCH_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>match_status IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByMatchStatus(PartyMatchInfoMatchStatus... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.MATCH_STATUS, values);
    }

    /**
     * Fetch records that have <code>meeting_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfMeetingDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.MEETING_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meeting_date IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByMeetingDate(LocalDate... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.MEETING_DATE, values);
    }

    /**
     * Fetch records that have <code>region BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfRegion(String lowerInclusive, String upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.REGION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>region IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByRegion(String... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.REGION, values);
    }

    /**
     * Fetch records that have <code>party_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfPartyId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.PARTY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>party_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByPartyId(Long... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.PARTY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>party_id = value</code>
     */
    public com.example.jooq.tables.pojos.PartyMatchInfo fetchOneByPartyId(Long value) {
        return fetchOne(PartyMatchInfo.PARTY_MATCH_INFO.PARTY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>party_id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.PartyMatchInfo> fetchOptionalByPartyId(Long value) {
        return fetchOptional(PartyMatchInfo.PARTY_MATCH_INFO.PARTY_ID, value);
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchRangeOfStoreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PartyMatchInfo.PARTY_MATCH_INFO.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchInfo> fetchByStoreId(Long... values) {
        return fetch(PartyMatchInfo.PARTY_MATCH_INFO.STORE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public com.example.jooq.tables.pojos.PartyMatchInfo fetchOneByStoreId(Long value) {
        return fetchOne(PartyMatchInfo.PARTY_MATCH_INFO.STORE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.PartyMatchInfo> fetchOptionalByStoreId(Long value) {
        return fetchOptional(PartyMatchInfo.PARTY_MATCH_INFO.STORE_ID, value);
    }
}
