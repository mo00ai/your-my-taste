/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.PkLogPkType;
import com.example.jooq.tables.records.PkLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkLog extends TableImpl<PkLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.pk_log</code>
     */
    public static final PkLog PK_LOG = new PkLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PkLogRecord> getRecordType() {
        return PkLogRecord.class;
    }

    /**
     * The column <code>taste.pk_log.id</code>.
     */
    public final TableField<PkLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.pk_log.created_at</code>.
     */
    public final TableField<PkLogRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>taste.pk_log.pk_type</code>.
     */
    public final TableField<PkLogRecord, PkLogPkType> PK_TYPE = createField(DSL.name("pk_type"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(com.example.jooq.enums.PkLogPkType.class), this, "");

    /**
     * The column <code>taste.pk_log.point</code>.
     */
    public final TableField<PkLogRecord, Integer> POINT = createField(DSL.name("point"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.pk_log.user_id</code>.
     */
    public final TableField<PkLogRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PkLog(Name alias, Table<PkLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private PkLog(Name alias, Table<PkLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.pk_log</code> table reference
     */
    public PkLog(String alias) {
        this(DSL.name(alias), PK_LOG);
    }

    /**
     * Create an aliased <code>taste.pk_log</code> table reference
     */
    public PkLog(Name alias) {
        this(alias, PK_LOG);
    }

    /**
     * Create a <code>taste.pk_log</code> table reference
     */
    public PkLog() {
        this(DSL.name("pk_log"), null);
    }

    public <O extends Record> PkLog(Table<O> child, ForeignKey<O, PkLogRecord> key) {
        super(child, key, PK_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<PkLogRecord, Long> getIdentity() {
        return (Identity<PkLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PkLogRecord> getPrimaryKey() {
        return Keys.KEY_PK_LOG_PRIMARY;
    }

    @Override
    public List<ForeignKey<PkLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK6X6MVMYUDBCLSF97XPKWJQ2AW);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK6X6MVMYUDBCLSF97XPKWJQ2AW);

        return _users;
    }

    @Override
    public PkLog as(String alias) {
        return new PkLog(DSL.name(alias), this);
    }

    @Override
    public PkLog as(Name alias) {
        return new PkLog(alias, this);
    }

    @Override
    public PkLog as(Table<?> alias) {
        return new PkLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PkLog rename(String name) {
        return new PkLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkLog rename(Name name) {
        return new PkLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkLog rename(Table<?> name) {
        return new PkLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, PkLogPkType, Integer, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDateTime, ? super PkLogPkType, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDateTime, ? super PkLogPkType, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
