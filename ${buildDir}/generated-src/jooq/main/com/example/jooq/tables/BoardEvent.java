/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.BoardEventRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoardEvent extends TableImpl<BoardEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.board_event</code>
     */
    public static final BoardEvent BOARD_EVENT = new BoardEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoardEventRecord> getRecordType() {
        return BoardEventRecord.class;
    }

    /**
     * The column <code>taste.board_event.id</code>.
     */
    public final TableField<BoardEventRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.board_event.created_at</code>.
     */
    public final TableField<BoardEventRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.board_event.updated_at</code>.
     */
    public final TableField<BoardEventRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.board_event.board_id</code>.
     */
    public final TableField<BoardEventRecord, Long> BOARD_ID = createField(DSL.name("board_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.board_event.event_id</code>.
     */
    public final TableField<BoardEventRecord, Long> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BoardEvent(Name alias, Table<BoardEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private BoardEvent(Name alias, Table<BoardEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.board_event</code> table reference
     */
    public BoardEvent(String alias) {
        this(DSL.name(alias), BOARD_EVENT);
    }

    /**
     * Create an aliased <code>taste.board_event</code> table reference
     */
    public BoardEvent(Name alias) {
        this(alias, BOARD_EVENT);
    }

    /**
     * Create a <code>taste.board_event</code> table reference
     */
    public BoardEvent() {
        this(DSL.name("board_event"), null);
    }

    public <O extends Record> BoardEvent(Table<O> child, ForeignKey<O, BoardEventRecord> key) {
        super(child, key, BOARD_EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<BoardEventRecord, Long> getIdentity() {
        return (Identity<BoardEventRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BoardEventRecord> getPrimaryKey() {
        return Keys.KEY_BOARD_EVENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<BoardEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKA842V972CV5LF63BC7T0H6NWK, Keys.FKOIX9HAITANMBF65EG5FO6GKF8);
    }

    private transient Board _board;
    private transient Event _event;

    /**
     * Get the implicit join path to the <code>taste.board</code> table.
     */
    public Board board() {
        if (_board == null)
            _board = new Board(this, Keys.FKA842V972CV5LF63BC7T0H6NWK);

        return _board;
    }

    /**
     * Get the implicit join path to the <code>taste.event</code> table.
     */
    public Event event() {
        if (_event == null)
            _event = new Event(this, Keys.FKOIX9HAITANMBF65EG5FO6GKF8);

        return _event;
    }

    @Override
    public BoardEvent as(String alias) {
        return new BoardEvent(DSL.name(alias), this);
    }

    @Override
    public BoardEvent as(Name alias) {
        return new BoardEvent(alias, this);
    }

    @Override
    public BoardEvent as(Table<?> alias) {
        return new BoardEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardEvent rename(String name) {
        return new BoardEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardEvent rename(Name name) {
        return new BoardEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardEvent rename(Table<?> name) {
        return new BoardEvent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
