/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.enums.PkLogPkType;
import com.example.jooq.tables.PkLog;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkLogRecord extends UpdatableRecordImpl<PkLogRecord> implements Record5<Long, LocalDateTime, PkLogPkType, Integer, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.pk_log.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.pk_log.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.pk_log.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.pk_log.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>taste.pk_log.pk_type</code>.
     */
    public void setPkType(PkLogPkType value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.pk_log.pk_type</code>.
     */
    public PkLogPkType getPkType() {
        return (PkLogPkType) get(2);
    }

    /**
     * Setter for <code>taste.pk_log.point</code>.
     */
    public void setPoint(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.pk_log.point</code>.
     */
    public Integer getPoint() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>taste.pk_log.user_id</code>.
     */
    public void setUserId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>taste.pk_log.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, PkLogPkType, Integer, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, LocalDateTime, PkLogPkType, Integer, Long> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PkLog.PK_LOG.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return PkLog.PK_LOG.CREATED_AT;
    }

    @Override
    public Field<PkLogPkType> field3() {
        return PkLog.PK_LOG.PK_TYPE;
    }

    @Override
    public Field<Integer> field4() {
        return PkLog.PK_LOG.POINT;
    }

    @Override
    public Field<Long> field5() {
        return PkLog.PK_LOG.USER_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedAt();
    }

    @Override
    public PkLogPkType component3() {
        return getPkType();
    }

    @Override
    public Integer component4() {
        return getPoint();
    }

    @Override
    public Long component5() {
        return getUserId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedAt();
    }

    @Override
    public PkLogPkType value3() {
        return getPkType();
    }

    @Override
    public Integer value4() {
        return getPoint();
    }

    @Override
    public Long value5() {
        return getUserId();
    }

    @Override
    public PkLogRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PkLogRecord value2(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public PkLogRecord value3(PkLogPkType value) {
        setPkType(value);
        return this;
    }

    @Override
    public PkLogRecord value4(Integer value) {
        setPoint(value);
        return this;
    }

    @Override
    public PkLogRecord value5(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public PkLogRecord values(Long value1, LocalDateTime value2, PkLogPkType value3, Integer value4, Long value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PkLogRecord
     */
    public PkLogRecord() {
        super(PkLog.PK_LOG);
    }

    /**
     * Create a detached, initialised PkLogRecord
     */
    public PkLogRecord(Long id, LocalDateTime createdAt, PkLogPkType pkType, Integer point, Long userId) {
        super(PkLog.PK_LOG);

        setId(id);
        setCreatedAt(createdAt);
        setPkType(pkType);
        setPoint(point);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PkLogRecord
     */
    public PkLogRecord(com.example.jooq.tables.pojos.PkLog value) {
        super(PkLog.PK_LOG);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setPkType(value.getPkType());
            setPoint(value.getPoint());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
