/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.PkCriteriaType;
import com.example.jooq.tables.records.PkCriteriaRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkCriteria extends TableImpl<PkCriteriaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.pk_criteria</code>
     */
    public static final PkCriteria PK_CRITERIA = new PkCriteria();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PkCriteriaRecord> getRecordType() {
        return PkCriteriaRecord.class;
    }

    /**
     * The column <code>taste.pk_criteria.id</code>.
     */
    public final TableField<PkCriteriaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.pk_criteria.is_active</code>.
     */
    public final TableField<PkCriteriaRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>taste.pk_criteria.point</code>.
     */
    public final TableField<PkCriteriaRecord, Integer> POINT = createField(DSL.name("point"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.pk_criteria.type</code>.
     */
    public final TableField<PkCriteriaRecord, PkCriteriaType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(com.example.jooq.enums.PkCriteriaType.class), this, "");

    private PkCriteria(Name alias, Table<PkCriteriaRecord> aliased) {
        this(alias, aliased, null);
    }

    private PkCriteria(Name alias, Table<PkCriteriaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.pk_criteria</code> table reference
     */
    public PkCriteria(String alias) {
        this(DSL.name(alias), PK_CRITERIA);
    }

    /**
     * Create an aliased <code>taste.pk_criteria</code> table reference
     */
    public PkCriteria(Name alias) {
        this(alias, PK_CRITERIA);
    }

    /**
     * Create a <code>taste.pk_criteria</code> table reference
     */
    public PkCriteria() {
        this(DSL.name("pk_criteria"), null);
    }

    public <O extends Record> PkCriteria(Table<O> child, ForeignKey<O, PkCriteriaRecord> key) {
        super(child, key, PK_CRITERIA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<PkCriteriaRecord, Long> getIdentity() {
        return (Identity<PkCriteriaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PkCriteriaRecord> getPrimaryKey() {
        return Keys.KEY_PK_CRITERIA_PRIMARY;
    }

    @Override
    public PkCriteria as(String alias) {
        return new PkCriteria(DSL.name(alias), this);
    }

    @Override
    public PkCriteria as(Name alias) {
        return new PkCriteria(alias, this);
    }

    @Override
    public PkCriteria as(Table<?> alias) {
        return new PkCriteria(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PkCriteria rename(String name) {
        return new PkCriteria(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkCriteria rename(Name name) {
        return new PkCriteria(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkCriteria rename(Table<?> name) {
        return new PkCriteria(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Boolean, Integer, PkCriteriaType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Boolean, ? super Integer, ? super PkCriteriaType, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Boolean, ? super Integer, ? super PkCriteriaType, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
