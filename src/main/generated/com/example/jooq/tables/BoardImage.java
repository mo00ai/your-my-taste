/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.BoardImageRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoardImage extends TableImpl<BoardImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.board_image</code>
     */
    public static final BoardImage BOARD_IMAGE = new BoardImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoardImageRecord> getRecordType() {
        return BoardImageRecord.class;
    }

    /**
     * The column <code>taste.board_image.id</code>.
     */
    public final TableField<BoardImageRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.board_image.board_id</code>.
     */
    public final TableField<BoardImageRecord, Long> BOARD_ID = createField(DSL.name("board_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.board_image.image_id</code>.
     */
    public final TableField<BoardImageRecord, Long> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BoardImage(Name alias, Table<BoardImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private BoardImage(Name alias, Table<BoardImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.board_image</code> table reference
     */
    public BoardImage(String alias) {
        this(DSL.name(alias), BOARD_IMAGE);
    }

    /**
     * Create an aliased <code>taste.board_image</code> table reference
     */
    public BoardImage(Name alias) {
        this(alias, BOARD_IMAGE);
    }

    /**
     * Create a <code>taste.board_image</code> table reference
     */
    public BoardImage() {
        this(DSL.name("board_image"), null);
    }

    public <O extends Record> BoardImage(Table<O> child, ForeignKey<O, BoardImageRecord> key) {
        super(child, key, BOARD_IMAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<BoardImageRecord, Long> getIdentity() {
        return (Identity<BoardImageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BoardImageRecord> getPrimaryKey() {
        return Keys.KEY_BOARD_IMAGE_PRIMARY;
    }

    @Override
    public List<ForeignKey<BoardImageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKP567MLNWW479XGIRMD98KCQNP, Keys.FK27RFQPC9PF352XV9FHR4VKLCI);
    }

    private transient Board _board;
    private transient Image _image;

    /**
     * Get the implicit join path to the <code>taste.board</code> table.
     */
    public Board board() {
        if (_board == null)
            _board = new Board(this, Keys.FKP567MLNWW479XGIRMD98KCQNP);

        return _board;
    }

    /**
     * Get the implicit join path to the <code>taste.image</code> table.
     */
    public Image image() {
        if (_image == null)
            _image = new Image(this, Keys.FK27RFQPC9PF352XV9FHR4VKLCI);

        return _image;
    }

    @Override
    public BoardImage as(String alias) {
        return new BoardImage(DSL.name(alias), this);
    }

    @Override
    public BoardImage as(Name alias) {
        return new BoardImage(alias, this);
    }

    @Override
    public BoardImage as(Table<?> alias) {
        return new BoardImage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardImage rename(String name) {
        return new BoardImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardImage rename(Name name) {
        return new BoardImage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardImage rename(Table<?> name) {
        return new BoardImage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
