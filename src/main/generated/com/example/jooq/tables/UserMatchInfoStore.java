/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.UserMatchInfoStoreRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchInfoStore extends TableImpl<UserMatchInfoStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.user_match_info_store</code>
     */
    public static final UserMatchInfoStore USER_MATCH_INFO_STORE = new UserMatchInfoStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMatchInfoStoreRecord> getRecordType() {
        return UserMatchInfoStoreRecord.class;
    }

    /**
     * The column <code>taste.user_match_info_store.id</code>.
     */
    public final TableField<UserMatchInfoStoreRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.user_match_info_store.store_id</code>.
     */
    public final TableField<UserMatchInfoStoreRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.user_match_info_store.user_match_info_id</code>.
     */
    public final TableField<UserMatchInfoStoreRecord, Long> USER_MATCH_INFO_ID = createField(DSL.name("user_match_info_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserMatchInfoStore(Name alias, Table<UserMatchInfoStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMatchInfoStore(Name alias, Table<UserMatchInfoStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.user_match_info_store</code> table
     * reference
     */
    public UserMatchInfoStore(String alias) {
        this(DSL.name(alias), USER_MATCH_INFO_STORE);
    }

    /**
     * Create an aliased <code>taste.user_match_info_store</code> table
     * reference
     */
    public UserMatchInfoStore(Name alias) {
        this(alias, USER_MATCH_INFO_STORE);
    }

    /**
     * Create a <code>taste.user_match_info_store</code> table reference
     */
    public UserMatchInfoStore() {
        this(DSL.name("user_match_info_store"), null);
    }

    public <O extends Record> UserMatchInfoStore(Table<O> child, ForeignKey<O, UserMatchInfoStoreRecord> key) {
        super(child, key, USER_MATCH_INFO_STORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public UniqueKey<UserMatchInfoStoreRecord> getPrimaryKey() {
        return Keys.KEY_USER_MATCH_INFO_STORE_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserMatchInfoStoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKLX7X0HBA2KB801IJTKCV0JPW9, Keys.FKEEN3N3APJQI73EI5OH9FY6QHY);
    }

    private transient Store _store;
    private transient UserMatchInfo _userMatchInfo;

    /**
     * Get the implicit join path to the <code>taste.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.FKLX7X0HBA2KB801IJTKCV0JPW9);

        return _store;
    }

    /**
     * Get the implicit join path to the <code>taste.user_match_info</code>
     * table.
     */
    public UserMatchInfo userMatchInfo() {
        if (_userMatchInfo == null)
            _userMatchInfo = new UserMatchInfo(this, Keys.FKEEN3N3APJQI73EI5OH9FY6QHY);

        return _userMatchInfo;
    }

    @Override
    public UserMatchInfoStore as(String alias) {
        return new UserMatchInfoStore(DSL.name(alias), this);
    }

    @Override
    public UserMatchInfoStore as(Name alias) {
        return new UserMatchInfoStore(alias, this);
    }

    @Override
    public UserMatchInfoStore as(Table<?> alias) {
        return new UserMatchInfoStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchInfoStore rename(String name) {
        return new UserMatchInfoStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchInfoStore rename(Name name) {
        return new UserMatchInfoStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchInfoStore rename(Table<?> name) {
        return new UserMatchInfoStore(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
