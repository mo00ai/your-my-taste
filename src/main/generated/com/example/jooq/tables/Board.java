/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.BoardStatus;
import com.example.jooq.enums.BoardType;
import com.example.jooq.tables.records.BoardRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Board extends TableImpl<BoardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.board</code>
     */
    public static final Board BOARD = new Board();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoardRecord> getRecordType() {
        return BoardRecord.class;
    }

    /**
     * The column <code>taste.board.id</code>.
     */
    public final TableField<BoardRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.board.created_at</code>.
     */
    public final TableField<BoardRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.board.deleted_at</code>.
     */
    public final TableField<BoardRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.board.updated_at</code>.
     */
    public final TableField<BoardRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.board.contents</code>.
     */
    public final TableField<BoardRecord, String> CONTENTS = createField(DSL.name("contents"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.board.open_limit</code>.
     */
    public final TableField<BoardRecord, Integer> OPEN_LIMIT = createField(DSL.name("open_limit"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>taste.board.open_time</code>.
     */
    public final TableField<BoardRecord, LocalDateTime> OPEN_TIME = createField(DSL.name("open_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.board.status</code>.
     */
    public final TableField<BoardRecord, BoardStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false).asEnumDataType(com.example.jooq.enums.BoardStatus.class), this, "");

    /**
     * The column <code>taste.board.title</code>.
     */
    public final TableField<BoardRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.board.type</code>.
     */
    public final TableField<BoardRecord, BoardType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(com.example.jooq.enums.BoardType.class), this, "");

    /**
     * The column <code>taste.board.store_id</code>.
     */
    public final TableField<BoardRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.board.user_id</code>.
     */
    public final TableField<BoardRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Board(Name alias, Table<BoardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Board(Name alias, Table<BoardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.board</code> table reference
     */
    public Board(String alias) {
        this(DSL.name(alias), BOARD);
    }

    /**
     * Create an aliased <code>taste.board</code> table reference
     */
    public Board(Name alias) {
        this(alias, BOARD);
    }

    /**
     * Create a <code>taste.board</code> table reference
     */
    public Board() {
        this(DSL.name("board"), null);
    }

    public <O extends Record> Board(Table<O> child, ForeignKey<O, BoardRecord> key) {
        super(child, key, BOARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<BoardRecord, Long> getIdentity() {
        return (Identity<BoardRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BoardRecord> getPrimaryKey() {
        return Keys.KEY_BOARD_PRIMARY;
    }

    @Override
    public List<ForeignKey<BoardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKQRCX4SHWCQ3XLX22I147O9DPS, Keys.FK5VLH90QYII65IXWSBNAFD55UD);
    }

    private transient Store _store;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.FKQRCX4SHWCQ3XLX22I147O9DPS);

        return _store;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK5VLH90QYII65IXWSBNAFD55UD);

        return _users;
    }

    @Override
    public Board as(String alias) {
        return new Board(DSL.name(alias), this);
    }

    @Override
    public Board as(Name alias) {
        return new Board(alias, this);
    }

    @Override
    public Board as(Table<?> alias) {
        return new Board(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Board rename(String name) {
        return new Board(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Board rename(Name name) {
        return new Board(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Board rename(Table<?> name) {
        return new Board(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, LocalDateTime, LocalDateTime, LocalDateTime, String, Integer, LocalDateTime, BoardStatus, String, BoardType, Long, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super LocalDateTime, ? super BoardStatus, ? super String, ? super BoardType, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super LocalDateTime, ? super BoardStatus, ? super String, ? super BoardType, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
