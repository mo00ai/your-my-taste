/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.tables.UserFavor;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFavorRecord extends UpdatableRecordImpl<UserFavorRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.user_favor.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.user_favor.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.user_favor.favor_id</code>.
     */
    public void setFavorId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.user_favor.favor_id</code>.
     */
    public Long getFavorId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>taste.user_favor.user_id</code>.
     */
    public void setUserId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.user_favor.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UserFavor.USER_FAVOR.ID;
    }

    @Override
    public Field<Long> field2() {
        return UserFavor.USER_FAVOR.FAVOR_ID;
    }

    @Override
    public Field<Long> field3() {
        return UserFavor.USER_FAVOR.USER_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getFavorId();
    }

    @Override
    public Long component3() {
        return getUserId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getFavorId();
    }

    @Override
    public Long value3() {
        return getUserId();
    }

    @Override
    public UserFavorRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public UserFavorRecord value2(Long value) {
        setFavorId(value);
        return this;
    }

    @Override
    public UserFavorRecord value3(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserFavorRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserFavorRecord
     */
    public UserFavorRecord() {
        super(UserFavor.USER_FAVOR);
    }

    /**
     * Create a detached, initialised UserFavorRecord
     */
    public UserFavorRecord(Long id, Long favorId, Long userId) {
        super(UserFavor.USER_FAVOR);

        setId(id);
        setFavorId(favorId);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserFavorRecord
     */
    public UserFavorRecord(com.example.jooq.tables.pojos.UserFavor value) {
        super(UserFavor.USER_FAVOR);

        if (value != null) {
            setId(value.getId());
            setFavorId(value.getFavorId());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
