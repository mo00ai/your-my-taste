/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.enums.NotificationInfoCategory;
import com.example.jooq.tables.NotificationInfo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationInfoRecord extends UpdatableRecordImpl<NotificationInfoRecord> implements Record7<Long, LocalDateTime, LocalDateTime, NotificationInfoCategory, Boolean, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.notification_info.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.notification_info.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.notification_info.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.notification_info.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>taste.notification_info.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.notification_info.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>taste.notification_info.category</code>.
     */
    public void setCategory(NotificationInfoCategory value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.notification_info.category</code>.
     */
    public NotificationInfoCategory getCategory() {
        return (NotificationInfoCategory) get(3);
    }

    /**
     * Setter for <code>taste.notification_info.is_read</code>.
     */
    public void setIsRead(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>taste.notification_info.is_read</code>.
     */
    public Boolean getIsRead() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>taste.notification_info.notification_content_id</code>.
     */
    public void setNotificationContentId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>taste.notification_info.notification_content_id</code>.
     */
    public Long getNotificationContentId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>taste.notification_info.notification_target</code>.
     */
    public void setNotificationTarget(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>taste.notification_info.notification_target</code>.
     */
    public Long getNotificationTarget() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, LocalDateTime, NotificationInfoCategory, Boolean, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, LocalDateTime, LocalDateTime, NotificationInfoCategory, Boolean, Long, Long> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return NotificationInfo.NOTIFICATION_INFO.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return NotificationInfo.NOTIFICATION_INFO.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return NotificationInfo.NOTIFICATION_INFO.UPDATED_AT;
    }

    @Override
    public Field<NotificationInfoCategory> field4() {
        return NotificationInfo.NOTIFICATION_INFO.CATEGORY;
    }

    @Override
    public Field<Boolean> field5() {
        return NotificationInfo.NOTIFICATION_INFO.IS_READ;
    }

    @Override
    public Field<Long> field6() {
        return NotificationInfo.NOTIFICATION_INFO.NOTIFICATION_CONTENT_ID;
    }

    @Override
    public Field<Long> field7() {
        return NotificationInfo.NOTIFICATION_INFO.NOTIFICATION_TARGET;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component3() {
        return getUpdatedAt();
    }

    @Override
    public NotificationInfoCategory component4() {
        return getCategory();
    }

    @Override
    public Boolean component5() {
        return getIsRead();
    }

    @Override
    public Long component6() {
        return getNotificationContentId();
    }

    @Override
    public Long component7() {
        return getNotificationTarget();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value3() {
        return getUpdatedAt();
    }

    @Override
    public NotificationInfoCategory value4() {
        return getCategory();
    }

    @Override
    public Boolean value5() {
        return getIsRead();
    }

    @Override
    public Long value6() {
        return getNotificationContentId();
    }

    @Override
    public Long value7() {
        return getNotificationTarget();
    }

    @Override
    public NotificationInfoRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public NotificationInfoRecord value2(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public NotificationInfoRecord value3(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public NotificationInfoRecord value4(NotificationInfoCategory value) {
        setCategory(value);
        return this;
    }

    @Override
    public NotificationInfoRecord value5(Boolean value) {
        setIsRead(value);
        return this;
    }

    @Override
    public NotificationInfoRecord value6(Long value) {
        setNotificationContentId(value);
        return this;
    }

    @Override
    public NotificationInfoRecord value7(Long value) {
        setNotificationTarget(value);
        return this;
    }

    @Override
    public NotificationInfoRecord values(Long value1, LocalDateTime value2, LocalDateTime value3, NotificationInfoCategory value4, Boolean value5, Long value6, Long value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotificationInfoRecord
     */
    public NotificationInfoRecord() {
        super(NotificationInfo.NOTIFICATION_INFO);
    }

    /**
     * Create a detached, initialised NotificationInfoRecord
     */
    public NotificationInfoRecord(Long id, LocalDateTime createdAt, LocalDateTime updatedAt, NotificationInfoCategory category, Boolean isRead, Long notificationContentId, Long notificationTarget) {
        super(NotificationInfo.NOTIFICATION_INFO);

        setId(id);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setCategory(category);
        setIsRead(isRead);
        setNotificationContentId(notificationContentId);
        setNotificationTarget(notificationTarget);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised NotificationInfoRecord
     */
    public NotificationInfoRecord(com.example.jooq.tables.pojos.NotificationInfo value) {
        super(NotificationInfo.NOTIFICATION_INFO);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setCategory(value.getCategory());
            setIsRead(value.getIsRead());
            setNotificationContentId(value.getNotificationContentId());
            setNotificationTarget(value.getNotificationTarget());
            resetChangedOnNotNull();
        }
    }
}
