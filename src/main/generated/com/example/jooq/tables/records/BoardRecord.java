/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.enums.BoardStatus;
import com.example.jooq.enums.BoardType;
import com.example.jooq.tables.Board;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoardRecord extends UpdatableRecordImpl<BoardRecord> implements Record12<Long, LocalDateTime, LocalDateTime, LocalDateTime, String, Integer, LocalDateTime, BoardStatus, String, BoardType, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.board.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.board.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.board.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.board.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>taste.board.deleted_at</code>.
     */
    public void setDeletedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.board.deleted_at</code>.
     */
    public LocalDateTime getDeletedAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>taste.board.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.board.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>taste.board.contents</code>.
     */
    public void setContents(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>taste.board.contents</code>.
     */
    public String getContents() {
        return (String) get(4);
    }

    /**
     * Setter for <code>taste.board.open_limit</code>.
     */
    public void setOpenLimit(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>taste.board.open_limit</code>.
     */
    public Integer getOpenLimit() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>taste.board.open_time</code>.
     */
    public void setOpenTime(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>taste.board.open_time</code>.
     */
    public LocalDateTime getOpenTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>taste.board.status</code>.
     */
    public void setStatus(BoardStatus value) {
        set(7, value);
    }

    /**
     * Getter for <code>taste.board.status</code>.
     */
    public BoardStatus getStatus() {
        return (BoardStatus) get(7);
    }

    /**
     * Setter for <code>taste.board.title</code>.
     */
    public void setTitle(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>taste.board.title</code>.
     */
    public String getTitle() {
        return (String) get(8);
    }

    /**
     * Setter for <code>taste.board.type</code>.
     */
    public void setType(BoardType value) {
        set(9, value);
    }

    /**
     * Getter for <code>taste.board.type</code>.
     */
    public BoardType getType() {
        return (BoardType) get(9);
    }

    /**
     * Setter for <code>taste.board.store_id</code>.
     */
    public void setStoreId(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>taste.board.store_id</code>.
     */
    public Long getStoreId() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>taste.board.user_id</code>.
     */
    public void setUserId(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>taste.board.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, LocalDateTime, LocalDateTime, LocalDateTime, String, Integer, LocalDateTime, BoardStatus, String, BoardType, Long, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Long, LocalDateTime, LocalDateTime, LocalDateTime, String, Integer, LocalDateTime, BoardStatus, String, BoardType, Long, Long> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Board.BOARD.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Board.BOARD.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Board.BOARD.DELETED_AT;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Board.BOARD.UPDATED_AT;
    }

    @Override
    public Field<String> field5() {
        return Board.BOARD.CONTENTS;
    }

    @Override
    public Field<Integer> field6() {
        return Board.BOARD.OPEN_LIMIT;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Board.BOARD.OPEN_TIME;
    }

    @Override
    public Field<BoardStatus> field8() {
        return Board.BOARD.STATUS;
    }

    @Override
    public Field<String> field9() {
        return Board.BOARD.TITLE;
    }

    @Override
    public Field<BoardType> field10() {
        return Board.BOARD.TYPE;
    }

    @Override
    public Field<Long> field11() {
        return Board.BOARD.STORE_ID;
    }

    @Override
    public Field<Long> field12() {
        return Board.BOARD.USER_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component3() {
        return getDeletedAt();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdatedAt();
    }

    @Override
    public String component5() {
        return getContents();
    }

    @Override
    public Integer component6() {
        return getOpenLimit();
    }

    @Override
    public LocalDateTime component7() {
        return getOpenTime();
    }

    @Override
    public BoardStatus component8() {
        return getStatus();
    }

    @Override
    public String component9() {
        return getTitle();
    }

    @Override
    public BoardType component10() {
        return getType();
    }

    @Override
    public Long component11() {
        return getStoreId();
    }

    @Override
    public Long component12() {
        return getUserId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value3() {
        return getDeletedAt();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdatedAt();
    }

    @Override
    public String value5() {
        return getContents();
    }

    @Override
    public Integer value6() {
        return getOpenLimit();
    }

    @Override
    public LocalDateTime value7() {
        return getOpenTime();
    }

    @Override
    public BoardStatus value8() {
        return getStatus();
    }

    @Override
    public String value9() {
        return getTitle();
    }

    @Override
    public BoardType value10() {
        return getType();
    }

    @Override
    public Long value11() {
        return getStoreId();
    }

    @Override
    public Long value12() {
        return getUserId();
    }

    @Override
    public BoardRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BoardRecord value2(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public BoardRecord value3(LocalDateTime value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    public BoardRecord value4(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public BoardRecord value5(String value) {
        setContents(value);
        return this;
    }

    @Override
    public BoardRecord value6(Integer value) {
        setOpenLimit(value);
        return this;
    }

    @Override
    public BoardRecord value7(LocalDateTime value) {
        setOpenTime(value);
        return this;
    }

    @Override
    public BoardRecord value8(BoardStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public BoardRecord value9(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public BoardRecord value10(BoardType value) {
        setType(value);
        return this;
    }

    @Override
    public BoardRecord value11(Long value) {
        setStoreId(value);
        return this;
    }

    @Override
    public BoardRecord value12(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public BoardRecord values(Long value1, LocalDateTime value2, LocalDateTime value3, LocalDateTime value4, String value5, Integer value6, LocalDateTime value7, BoardStatus value8, String value9, BoardType value10, Long value11, Long value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BoardRecord
     */
    public BoardRecord() {
        super(Board.BOARD);
    }

    /**
     * Create a detached, initialised BoardRecord
     */
    public BoardRecord(Long id, LocalDateTime createdAt, LocalDateTime deletedAt, LocalDateTime updatedAt, String contents, Integer openLimit, LocalDateTime openTime, BoardStatus status, String title, BoardType type, Long storeId, Long userId) {
        super(Board.BOARD);

        setId(id);
        setCreatedAt(createdAt);
        setDeletedAt(deletedAt);
        setUpdatedAt(updatedAt);
        setContents(contents);
        setOpenLimit(openLimit);
        setOpenTime(openTime);
        setStatus(status);
        setTitle(title);
        setType(type);
        setStoreId(storeId);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised BoardRecord
     */
    public BoardRecord(com.example.jooq.tables.pojos.Board value) {
        super(Board.BOARD);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setDeletedAt(value.getDeletedAt());
            setUpdatedAt(value.getUpdatedAt());
            setContents(value.getContents());
            setOpenLimit(value.getOpenLimit());
            setOpenTime(value.getOpenTime());
            setStatus(value.getStatus());
            setTitle(value.getTitle());
            setType(value.getType());
            setStoreId(value.getStoreId());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
