/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.tables.UserMatchCondCategory;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchCondCategoryRecord extends UpdatableRecordImpl<UserMatchCondCategoryRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.user_match_cond_category.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.user_match_cond_category.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.user_match_cond_category.category_id</code>.
     */
    public void setCategoryId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.user_match_cond_category.category_id</code>.
     */
    public Long getCategoryId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>taste.user_match_cond_category.user_match_cond_id</code>.
     */
    public void setUserMatchCondId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>taste.user_match_cond_category.user_match_cond_id</code>.
     */
    public Long getUserMatchCondId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UserMatchCondCategory.USER_MATCH_COND_CATEGORY.ID;
    }

    @Override
    public Field<Long> field2() {
        return UserMatchCondCategory.USER_MATCH_COND_CATEGORY.CATEGORY_ID;
    }

    @Override
    public Field<Long> field3() {
        return UserMatchCondCategory.USER_MATCH_COND_CATEGORY.USER_MATCH_COND_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getCategoryId();
    }

    @Override
    public Long component3() {
        return getUserMatchCondId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getCategoryId();
    }

    @Override
    public Long value3() {
        return getUserMatchCondId();
    }

    @Override
    public UserMatchCondCategoryRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public UserMatchCondCategoryRecord value2(Long value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public UserMatchCondCategoryRecord value3(Long value) {
        setUserMatchCondId(value);
        return this;
    }

    @Override
    public UserMatchCondCategoryRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserMatchCondCategoryRecord
     */
    public UserMatchCondCategoryRecord() {
        super(UserMatchCondCategory.USER_MATCH_COND_CATEGORY);
    }

    /**
     * Create a detached, initialised UserMatchCondCategoryRecord
     */
    public UserMatchCondCategoryRecord(Long id, Long categoryId, Long userMatchCondId) {
        super(UserMatchCondCategory.USER_MATCH_COND_CATEGORY);

        setId(id);
        setCategoryId(categoryId);
        setUserMatchCondId(userMatchCondId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserMatchCondCategoryRecord
     */
    public UserMatchCondCategoryRecord(com.example.jooq.tables.pojos.UserMatchCondCategory value) {
        super(UserMatchCondCategory.USER_MATCH_COND_CATEGORY);

        if (value != null) {
            setId(value.getId());
            setCategoryId(value.getCategoryId());
            setUserMatchCondId(value.getUserMatchCondId());
            resetChangedOnNotNull();
        }
    }
}
