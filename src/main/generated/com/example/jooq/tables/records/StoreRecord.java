/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.tables.Store;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreRecord extends UpdatableRecordImpl<StoreRecord> implements Record11<Long, LocalDateTime, LocalDateTime, String, String, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taste.store.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taste.store.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taste.store.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>taste.store.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>taste.store.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>taste.store.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>taste.store.address</code>.
     */
    public void setAddress(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>taste.store.address</code>.
     */
    public String getAddress() {
        return (String) get(3);
    }

    /**
     * Setter for <code>taste.store.description</code>.
     */
    public void setDescription(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>taste.store.description</code>.
     */
    public String getDescription() {
        return (String) get(4);
    }

    /**
     * Setter for <code>taste.store.mapx</code>.
     */
    public void setMapx(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>taste.store.mapx</code>.
     */
    public BigDecimal getMapx() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>taste.store.mapy</code>.
     */
    public void setMapy(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>taste.store.mapy</code>.
     */
    public BigDecimal getMapy() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>taste.store.name</code>.
     */
    public void setName(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>taste.store.name</code>.
     */
    public String getName() {
        return (String) get(7);
    }

    /**
     * Setter for <code>taste.store.road_address</code>.
     */
    public void setRoadAddress(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>taste.store.road_address</code>.
     */
    public String getRoadAddress() {
        return (String) get(8);
    }

    /**
     * Setter for <code>taste.store.category_id</code>.
     */
    public void setCategoryId(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>taste.store.category_id</code>.
     */
    public Long getCategoryId() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>taste.store.deleted_at</code>.
     */
    public void setDeletedAt(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>taste.store.deleted_at</code>.
     */
    public LocalDateTime getDeletedAt() {
        return (LocalDateTime) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, LocalDateTime, LocalDateTime, String, String, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, LocalDateTime, LocalDateTime, String, String, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Store.STORE.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Store.STORE.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Store.STORE.UPDATED_AT;
    }

    @Override
    public Field<String> field4() {
        return Store.STORE.ADDRESS;
    }

    @Override
    public Field<String> field5() {
        return Store.STORE.DESCRIPTION;
    }

    @Override
    public Field<BigDecimal> field6() {
        return Store.STORE.MAPX;
    }

    @Override
    public Field<BigDecimal> field7() {
        return Store.STORE.MAPY;
    }

    @Override
    public Field<String> field8() {
        return Store.STORE.NAME;
    }

    @Override
    public Field<String> field9() {
        return Store.STORE.ROAD_ADDRESS;
    }

    @Override
    public Field<Long> field10() {
        return Store.STORE.CATEGORY_ID;
    }

    @Override
    public Field<LocalDateTime> field11() {
        return Store.STORE.DELETED_AT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component3() {
        return getUpdatedAt();
    }

    @Override
    public String component4() {
        return getAddress();
    }

    @Override
    public String component5() {
        return getDescription();
    }

    @Override
    public BigDecimal component6() {
        return getMapx();
    }

    @Override
    public BigDecimal component7() {
        return getMapy();
    }

    @Override
    public String component8() {
        return getName();
    }

    @Override
    public String component9() {
        return getRoadAddress();
    }

    @Override
    public Long component10() {
        return getCategoryId();
    }

    @Override
    public LocalDateTime component11() {
        return getDeletedAt();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value3() {
        return getUpdatedAt();
    }

    @Override
    public String value4() {
        return getAddress();
    }

    @Override
    public String value5() {
        return getDescription();
    }

    @Override
    public BigDecimal value6() {
        return getMapx();
    }

    @Override
    public BigDecimal value7() {
        return getMapy();
    }

    @Override
    public String value8() {
        return getName();
    }

    @Override
    public String value9() {
        return getRoadAddress();
    }

    @Override
    public Long value10() {
        return getCategoryId();
    }

    @Override
    public LocalDateTime value11() {
        return getDeletedAt();
    }

    @Override
    public StoreRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public StoreRecord value2(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public StoreRecord value3(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public StoreRecord value4(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public StoreRecord value5(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public StoreRecord value6(BigDecimal value) {
        setMapx(value);
        return this;
    }

    @Override
    public StoreRecord value7(BigDecimal value) {
        setMapy(value);
        return this;
    }

    @Override
    public StoreRecord value8(String value) {
        setName(value);
        return this;
    }

    @Override
    public StoreRecord value9(String value) {
        setRoadAddress(value);
        return this;
    }

    @Override
    public StoreRecord value10(Long value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public StoreRecord value11(LocalDateTime value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    public StoreRecord values(Long value1, LocalDateTime value2, LocalDateTime value3, String value4, String value5, BigDecimal value6, BigDecimal value7, String value8, String value9, Long value10, LocalDateTime value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StoreRecord
     */
    public StoreRecord() {
        super(Store.STORE);
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(Long id, LocalDateTime createdAt, LocalDateTime updatedAt, String address, String description, BigDecimal mapx, BigDecimal mapy, String name, String roadAddress, Long categoryId, LocalDateTime deletedAt) {
        super(Store.STORE);

        setId(id);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setAddress(address);
        setDescription(description);
        setMapx(mapx);
        setMapy(mapy);
        setName(name);
        setRoadAddress(roadAddress);
        setCategoryId(categoryId);
        setDeletedAt(deletedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(com.example.jooq.tables.pojos.Store value) {
        super(Store.STORE);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setAddress(value.getAddress());
            setDescription(value.getDescription());
            setMapx(value.getMapx());
            setMapy(value.getMapy());
            setName(value.getName());
            setRoadAddress(value.getRoadAddress());
            setCategoryId(value.getCategoryId());
            setDeletedAt(value.getDeletedAt());
            resetChangedOnNotNull();
        }
    }
}
