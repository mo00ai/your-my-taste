/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.PkTermRankRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkTermRank extends TableImpl<PkTermRankRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.pk_term_rank</code>
     */
    public static final PkTermRank PK_TERM_RANK = new PkTermRank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PkTermRankRecord> getRecordType() {
        return PkTermRankRecord.class;
    }

    /**
     * The column <code>taste.pk_term_rank.id</code>.
     */
    public final TableField<PkTermRankRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.pk_term_rank.point</code>.
     */
    public final TableField<PkTermRankRecord, Integer> POINT = createField(DSL.name("point"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.pk_term_rank.ranking</code>.
     */
    public final TableField<PkTermRankRecord, Integer> RANKING = createField(DSL.name("ranking"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.pk_term_rank.pk_term_id</code>.
     */
    public final TableField<PkTermRankRecord, Long> PK_TERM_ID = createField(DSL.name("pk_term_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.pk_term_rank.user_id</code>.
     */
    public final TableField<PkTermRankRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PkTermRank(Name alias, Table<PkTermRankRecord> aliased) {
        this(alias, aliased, null);
    }

    private PkTermRank(Name alias, Table<PkTermRankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.pk_term_rank</code> table reference
     */
    public PkTermRank(String alias) {
        this(DSL.name(alias), PK_TERM_RANK);
    }

    /**
     * Create an aliased <code>taste.pk_term_rank</code> table reference
     */
    public PkTermRank(Name alias) {
        this(alias, PK_TERM_RANK);
    }

    /**
     * Create a <code>taste.pk_term_rank</code> table reference
     */
    public PkTermRank() {
        this(DSL.name("pk_term_rank"), null);
    }

    public <O extends Record> PkTermRank(Table<O> child, ForeignKey<O, PkTermRankRecord> key) {
        super(child, key, PK_TERM_RANK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<PkTermRankRecord, Long> getIdentity() {
        return (Identity<PkTermRankRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PkTermRankRecord> getPrimaryKey() {
        return Keys.KEY_PK_TERM_RANK_PRIMARY;
    }

    @Override
    public List<ForeignKey<PkTermRankRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKJ52POEKT1R3E8I8REE6POU8MJ, Keys.FKL8NJ51UEPXKNS6I0C0A1DSKDA);
    }

    private transient PkTerm _pkTerm;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.pk_term</code> table.
     */
    public PkTerm pkTerm() {
        if (_pkTerm == null)
            _pkTerm = new PkTerm(this, Keys.FKJ52POEKT1R3E8I8REE6POU8MJ);

        return _pkTerm;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FKL8NJ51UEPXKNS6I0C0A1DSKDA);

        return _users;
    }

    @Override
    public PkTermRank as(String alias) {
        return new PkTermRank(DSL.name(alias), this);
    }

    @Override
    public PkTermRank as(Name alias) {
        return new PkTermRank(alias, this);
    }

    @Override
    public PkTermRank as(Table<?> alias) {
        return new PkTermRank(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PkTermRank rename(String name) {
        return new PkTermRank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkTermRank rename(Name name) {
        return new PkTermRank(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PkTermRank rename(Table<?> name) {
        return new PkTermRank(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Integer, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Integer, ? super Integer, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Integer, ? super Integer, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
