/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.PkCriteriaType;
import com.example.jooq.tables.PkCriteria;
import com.example.jooq.tables.records.PkCriteriaRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkCriteriaDao extends DAOImpl<PkCriteriaRecord, com.example.jooq.tables.pojos.PkCriteria, Long> {

    /**
     * Create a new PkCriteriaDao without any configuration
     */
    public PkCriteriaDao() {
        super(PkCriteria.PK_CRITERIA, com.example.jooq.tables.pojos.PkCriteria.class);
    }

    /**
     * Create a new PkCriteriaDao with an attached configuration
     */
    public PkCriteriaDao(Configuration configuration) {
        super(PkCriteria.PK_CRITERIA, com.example.jooq.tables.pojos.PkCriteria.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.PkCriteria object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PkCriteria.PK_CRITERIA.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchById(Long... values) {
        return fetch(PkCriteria.PK_CRITERIA.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.PkCriteria fetchOneById(Long value) {
        return fetchOne(PkCriteria.PK_CRITERIA.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.PkCriteria> fetchOptionalById(Long value) {
        return fetchOptional(PkCriteria.PK_CRITERIA.ID, value);
    }

    /**
     * Fetch records that have <code>is_active BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchRangeOfIsActive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PkCriteria.PK_CRITERIA.IS_ACTIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_active IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchByIsActive(Boolean... values) {
        return fetch(PkCriteria.PK_CRITERIA.IS_ACTIVE, values);
    }

    /**
     * Fetch records that have <code>point BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchRangeOfPoint(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PkCriteria.PK_CRITERIA.POINT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>point IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchByPoint(Integer... values) {
        return fetch(PkCriteria.PK_CRITERIA.POINT, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchRangeOfType(PkCriteriaType lowerInclusive, PkCriteriaType upperInclusive) {
        return fetchRange(PkCriteria.PK_CRITERIA.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkCriteria> fetchByType(PkCriteriaType... values) {
        return fetch(PkCriteria.PK_CRITERIA.TYPE, values);
    }
}
