/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.PartyMatchCondGender;
import com.example.jooq.enums.PartyMatchCondMatchingStatus;
import com.example.jooq.tables.PartyMatchCond;
import com.example.jooq.tables.records.PartyMatchCondRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyMatchCondDao extends DAOImpl<PartyMatchCondRecord, com.example.jooq.tables.pojos.PartyMatchCond, Long> {

    /**
     * Create a new PartyMatchCondDao without any configuration
     */
    public PartyMatchCondDao() {
        super(PartyMatchCond.PARTY_MATCH_COND, com.example.jooq.tables.pojos.PartyMatchCond.class);
    }

    /**
     * Create a new PartyMatchCondDao with an attached configuration
     */
    public PartyMatchCondDao(Configuration configuration) {
        super(PartyMatchCond.PARTY_MATCH_COND, com.example.jooq.tables.pojos.PartyMatchCond.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.PartyMatchCond object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchById(Long... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.PartyMatchCond fetchOneById(Long value) {
        return fetchOne(PartyMatchCond.PARTY_MATCH_COND.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.PartyMatchCond> fetchOptionalById(Long value) {
        return fetchOptional(PartyMatchCond.PARTY_MATCH_COND.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>age_max_range BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfAgeMaxRange(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.AGE_MAX_RANGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age_max_range IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchByAgeMaxRange(Integer... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.AGE_MAX_RANGE, values);
    }

    /**
     * Fetch records that have <code>age_min_range BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfAgeMinRange(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.AGE_MIN_RANGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age_min_range IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchByAgeMinRange(Integer... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.AGE_MIN_RANGE, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfGender(PartyMatchCondGender lowerInclusive, PartyMatchCondGender upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchByGender(PartyMatchCondGender... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.GENDER, values);
    }

    /**
     * Fetch records that have <code>matching_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfMatchingStatus(PartyMatchCondMatchingStatus lowerInclusive, PartyMatchCondMatchingStatus upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.MATCHING_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>matching_status IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchByMatchingStatus(PartyMatchCondMatchingStatus... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.MATCHING_STATUS, values);
    }

    /**
     * Fetch records that have <code>region BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfRegion(String lowerInclusive, String upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.REGION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>region IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchByRegion(String... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.REGION, values);
    }

    /**
     * Fetch records that have <code>party_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchRangeOfPartyId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PartyMatchCond.PARTY_MATCH_COND.PARTY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>party_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PartyMatchCond> fetchByPartyId(Long... values) {
        return fetch(PartyMatchCond.PARTY_MATCH_COND.PARTY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>party_id = value</code>
     */
    public com.example.jooq.tables.pojos.PartyMatchCond fetchOneByPartyId(Long value) {
        return fetchOne(PartyMatchCond.PARTY_MATCH_COND.PARTY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>party_id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.PartyMatchCond> fetchOptionalByPartyId(Long value) {
        return fetchOptional(PartyMatchCond.PARTY_MATCH_COND.PARTY_ID, value);
    }
}
