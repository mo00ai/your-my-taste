/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.BoardStatus;
import com.example.jooq.enums.BoardType;
import com.example.jooq.tables.Board;
import com.example.jooq.tables.records.BoardRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoardDao extends DAOImpl<BoardRecord, com.example.jooq.tables.pojos.Board, Long> {

    /**
     * Create a new BoardDao without any configuration
     */
    public BoardDao() {
        super(Board.BOARD, com.example.jooq.tables.pojos.Board.class);
    }

    /**
     * Create a new BoardDao with an attached configuration
     */
    public BoardDao(Configuration configuration) {
        super(Board.BOARD, com.example.jooq.tables.pojos.Board.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.Board object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Board.BOARD.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchById(Long... values) {
        return fetch(Board.BOARD.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.Board fetchOneById(Long value) {
        return fetchOne(Board.BOARD.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Board> fetchOptionalById(Long value) {
        return fetchOptional(Board.BOARD.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Board.BOARD.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Board.BOARD.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfDeletedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Board.BOARD.DELETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByDeletedAt(LocalDateTime... values) {
        return fetch(Board.BOARD.DELETED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Board.BOARD.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Board.BOARD.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>contents BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfContents(String lowerInclusive, String upperInclusive) {
        return fetchRange(Board.BOARD.CONTENTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>contents IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByContents(String... values) {
        return fetch(Board.BOARD.CONTENTS, values);
    }

    /**
     * Fetch records that have <code>open_limit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfOpenLimit(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Board.BOARD.OPEN_LIMIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>open_limit IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByOpenLimit(Integer... values) {
        return fetch(Board.BOARD.OPEN_LIMIT, values);
    }

    /**
     * Fetch records that have <code>open_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfOpenTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Board.BOARD.OPEN_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>open_time IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByOpenTime(LocalDateTime... values) {
        return fetch(Board.BOARD.OPEN_TIME, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfStatus(BoardStatus lowerInclusive, BoardStatus upperInclusive) {
        return fetchRange(Board.BOARD.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByStatus(BoardStatus... values) {
        return fetch(Board.BOARD.STATUS, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Board.BOARD.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByTitle(String... values) {
        return fetch(Board.BOARD.TITLE, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfType(BoardType lowerInclusive, BoardType upperInclusive) {
        return fetchRange(Board.BOARD.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByType(BoardType... values) {
        return fetch(Board.BOARD.TYPE, values);
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfStoreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Board.BOARD.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByStoreId(Long... values) {
        return fetch(Board.BOARD.STORE_ID, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Board.BOARD.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Board> fetchByUserId(Long... values) {
        return fetch(Board.BOARD.USER_ID, values);
    }
}
