/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.PkLogPkType;
import com.example.jooq.tables.PkLog;
import com.example.jooq.tables.records.PkLogRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PkLogDao extends DAOImpl<PkLogRecord, com.example.jooq.tables.pojos.PkLog, Long> {

    /**
     * Create a new PkLogDao without any configuration
     */
    public PkLogDao() {
        super(PkLog.PK_LOG, com.example.jooq.tables.pojos.PkLog.class);
    }

    /**
     * Create a new PkLogDao with an attached configuration
     */
    public PkLogDao(Configuration configuration) {
        super(PkLog.PK_LOG, com.example.jooq.tables.pojos.PkLog.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.PkLog object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PkLog.PK_LOG.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchById(Long... values) {
        return fetch(PkLog.PK_LOG.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.PkLog fetchOneById(Long value) {
        return fetchOne(PkLog.PK_LOG.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.PkLog> fetchOptionalById(Long value) {
        return fetchOptional(PkLog.PK_LOG.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(PkLog.PK_LOG.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(PkLog.PK_LOG.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>pk_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchRangeOfPkType(PkLogPkType lowerInclusive, PkLogPkType upperInclusive) {
        return fetchRange(PkLog.PK_LOG.PK_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pk_type IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchByPkType(PkLogPkType... values) {
        return fetch(PkLog.PK_LOG.PK_TYPE, values);
    }

    /**
     * Fetch records that have <code>point BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchRangeOfPoint(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PkLog.PK_LOG.POINT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>point IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchByPoint(Integer... values) {
        return fetch(PkLog.PK_LOG.POINT, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PkLog.PK_LOG.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.PkLog> fetchByUserId(Long... values) {
        return fetch(PkLog.PK_LOG.USER_ID, values);
    }
}
