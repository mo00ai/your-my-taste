/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.tables.Category;
import com.example.jooq.tables.records.CategoryRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryDao extends DAOImpl<CategoryRecord, com.example.jooq.tables.pojos.Category, Long> {

    /**
     * Create a new CategoryDao without any configuration
     */
    public CategoryDao() {
        super(Category.CATEGORY, com.example.jooq.tables.pojos.Category.class);
    }

    /**
     * Create a new CategoryDao with an attached configuration
     */
    public CategoryDao(Configuration configuration) {
        super(Category.CATEGORY, com.example.jooq.tables.pojos.Category.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.Category object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Category.CATEGORY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchById(Long... values) {
        return fetch(Category.CATEGORY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.Category fetchOneById(Long value) {
        return fetchOne(Category.CATEGORY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Category> fetchOptionalById(Long value) {
        return fetchOptional(Category.CATEGORY.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Category.CATEGORY.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Category.CATEGORY.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Category.CATEGORY.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Category.CATEGORY.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>display_order BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchRangeOfDisplayOrder(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Category.CATEGORY.DISPLAY_ORDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>display_order IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchByDisplayOrder(Integer... values) {
        return fetch(Category.CATEGORY.DISPLAY_ORDER, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.Category> fetchByName(String... values) {
        return fetch(Category.CATEGORY.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public com.example.jooq.tables.pojos.Category fetchOneByName(String value) {
        return fetchOne(Category.CATEGORY.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.Category> fetchOptionalByName(String value) {
        return fetchOptional(Category.CATEGORY.NAME, value);
    }
}
