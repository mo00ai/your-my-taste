/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.UserMatchInfoMatchStatus;
import com.example.jooq.enums.UserMatchInfoUserGender;
import com.example.jooq.tables.UserMatchInfo;
import com.example.jooq.tables.records.UserMatchInfoRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchInfoDao extends DAOImpl<UserMatchInfoRecord, com.example.jooq.tables.pojos.UserMatchInfo, Long> {

    /**
     * Create a new UserMatchInfoDao without any configuration
     */
    public UserMatchInfoDao() {
        super(UserMatchInfo.USER_MATCH_INFO, com.example.jooq.tables.pojos.UserMatchInfo.class);
    }

    /**
     * Create a new UserMatchInfoDao with an attached configuration
     */
    public UserMatchInfoDao(Configuration configuration) {
        super(UserMatchInfo.USER_MATCH_INFO, com.example.jooq.tables.pojos.UserMatchInfo.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.UserMatchInfo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchById(Long... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.UserMatchInfo fetchOneById(Long value) {
        return fetchOne(UserMatchInfo.USER_MATCH_INFO.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.UserMatchInfo> fetchOptionalById(Long value) {
        return fetchOptional(UserMatchInfo.USER_MATCH_INFO.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>max_age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfMaxAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.MAX_AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_age IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByMaxAge(Integer... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.MAX_AGE, values);
    }

    /**
     * Fetch records that have <code>min_age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfMinAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.MIN_AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>min_age IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByMinAge(Integer... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.MIN_AGE, values);
    }

    /**
     * Fetch records that have <code>match_started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfMatchStartedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.MATCH_STARTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>match_started_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByMatchStartedAt(LocalDateTime... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.MATCH_STARTED_AT, values);
    }

    /**
     * Fetch records that have <code>match_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfMatchStatus(UserMatchInfoMatchStatus lowerInclusive, UserMatchInfoMatchStatus upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.MATCH_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>match_status IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByMatchStatus(UserMatchInfoMatchStatus... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.MATCH_STATUS, values);
    }

    /**
     * Fetch records that have <code>meeting_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfMeetingDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.MEETING_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meeting_date IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByMeetingDate(LocalDate... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.MEETING_DATE, values);
    }

    /**
     * Fetch records that have <code>region BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfRegion(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.REGION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>region IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByRegion(String... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.REGION, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByTitle(String... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.TITLE, values);
    }

    /**
     * Fetch records that have <code>user_age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfUserAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.USER_AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_age IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByUserAge(Integer... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.USER_AGE, values);
    }

    /**
     * Fetch records that have <code>user_gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfUserGender(UserMatchInfoUserGender lowerInclusive, UserMatchInfoUserGender upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.USER_GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_gender IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByUserGender(UserMatchInfoUserGender... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.USER_GENDER, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserMatchInfo.USER_MATCH_INFO.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchInfo> fetchByUserId(Long... values) {
        return fetch(UserMatchInfo.USER_MATCH_INFO.USER_ID, values);
    }
}
