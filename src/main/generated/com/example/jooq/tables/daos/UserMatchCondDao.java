/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.daos;


import com.example.jooq.enums.UserMatchCondGender;
import com.example.jooq.enums.UserMatchCondMatchingStatus;
import com.example.jooq.tables.UserMatchCond;
import com.example.jooq.tables.records.UserMatchCondRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchCondDao extends DAOImpl<UserMatchCondRecord, com.example.jooq.tables.pojos.UserMatchCond, Long> {

    /**
     * Create a new UserMatchCondDao without any configuration
     */
    public UserMatchCondDao() {
        super(UserMatchCond.USER_MATCH_COND, com.example.jooq.tables.pojos.UserMatchCond.class);
    }

    /**
     * Create a new UserMatchCondDao with an attached configuration
     */
    public UserMatchCondDao(Configuration configuration) {
        super(UserMatchCond.USER_MATCH_COND, com.example.jooq.tables.pojos.UserMatchCond.class, configuration);
    }

    @Override
    public Long getId(com.example.jooq.tables.pojos.UserMatchCond object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchById(Long... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.jooq.tables.pojos.UserMatchCond fetchOneById(Long value) {
        return fetchOne(UserMatchCond.USER_MATCH_COND.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.example.jooq.tables.pojos.UserMatchCond> fetchOptionalById(Long value) {
        return fetchOptional(UserMatchCond.USER_MATCH_COND.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>age_max_range BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfAgeMaxRange(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.AGE_MAX_RANGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age_max_range IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchByAgeMaxRange(Integer... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.AGE_MAX_RANGE, values);
    }

    /**
     * Fetch records that have <code>age_min_range BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfAgeMinRange(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.AGE_MIN_RANGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age_min_range IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchByAgeMinRange(Integer... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.AGE_MIN_RANGE, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfGender(UserMatchCondGender lowerInclusive, UserMatchCondGender upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchByGender(UserMatchCondGender... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.GENDER, values);
    }

    /**
     * Fetch records that have <code>matching_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfMatchingStatus(UserMatchCondMatchingStatus lowerInclusive, UserMatchCondMatchingStatus upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.MATCHING_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>matching_status IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchByMatchingStatus(UserMatchCondMatchingStatus... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.MATCHING_STATUS, values);
    }

    /**
     * Fetch records that have <code>region BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfRegion(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.REGION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>region IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchByRegion(String... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.REGION, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserMatchCond.USER_MATCH_COND.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.example.jooq.tables.pojos.UserMatchCond> fetchByUserId(Long... values) {
        return fetch(UserMatchCond.USER_MATCH_COND.USER_ID, values);
    }
}
