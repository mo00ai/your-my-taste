/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.UserMatchInfoMatchStatus;
import com.example.jooq.enums.UserMatchInfoUserGender;
import com.example.jooq.tables.records.UserMatchInfoRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchInfo extends TableImpl<UserMatchInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.user_match_info</code>
     */
    public static final UserMatchInfo USER_MATCH_INFO = new UserMatchInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMatchInfoRecord> getRecordType() {
        return UserMatchInfoRecord.class;
    }

    /**
     * The column <code>taste.user_match_info.id</code>.
     */
    public final TableField<UserMatchInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.user_match_info.created_at</code>.
     */
    public final TableField<UserMatchInfoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.user_match_info.max_age</code>.
     */
    public final TableField<UserMatchInfoRecord, Integer> MAX_AGE = createField(DSL.name("max_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>taste.user_match_info.min_age</code>.
     */
    public final TableField<UserMatchInfoRecord, Integer> MIN_AGE = createField(DSL.name("min_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>taste.user_match_info.match_started_at</code>.
     */
    public final TableField<UserMatchInfoRecord, LocalDateTime> MATCH_STARTED_AT = createField(DSL.name("match_started_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.user_match_info.match_status</code>.
     */
    public final TableField<UserMatchInfoRecord, UserMatchInfoMatchStatus> MATCH_STATUS = createField(DSL.name("match_status"), SQLDataType.VARCHAR(12).asEnumDataType(com.example.jooq.enums.UserMatchInfoMatchStatus.class), this, "");

    /**
     * The column <code>taste.user_match_info.meeting_date</code>.
     */
    public final TableField<UserMatchInfoRecord, LocalDate> MEETING_DATE = createField(DSL.name("meeting_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>taste.user_match_info.region</code>.
     */
    public final TableField<UserMatchInfoRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>taste.user_match_info.title</code>.
     */
    public final TableField<UserMatchInfoRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>taste.user_match_info.user_age</code>.
     */
    public final TableField<UserMatchInfoRecord, Integer> USER_AGE = createField(DSL.name("user_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>taste.user_match_info.user_gender</code>.
     */
    public final TableField<UserMatchInfoRecord, UserMatchInfoUserGender> USER_GENDER = createField(DSL.name("user_gender"), SQLDataType.VARCHAR(6).asEnumDataType(com.example.jooq.enums.UserMatchInfoUserGender.class), this, "");

    /**
     * The column <code>taste.user_match_info.user_id</code>.
     */
    public final TableField<UserMatchInfoRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserMatchInfo(Name alias, Table<UserMatchInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMatchInfo(Name alias, Table<UserMatchInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.user_match_info</code> table reference
     */
    public UserMatchInfo(String alias) {
        this(DSL.name(alias), USER_MATCH_INFO);
    }

    /**
     * Create an aliased <code>taste.user_match_info</code> table reference
     */
    public UserMatchInfo(Name alias) {
        this(alias, USER_MATCH_INFO);
    }

    /**
     * Create a <code>taste.user_match_info</code> table reference
     */
    public UserMatchInfo() {
        this(DSL.name("user_match_info"), null);
    }

    public <O extends Record> UserMatchInfo(Table<O> child, ForeignKey<O, UserMatchInfoRecord> key) {
        super(child, key, USER_MATCH_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<UserMatchInfoRecord, Long> getIdentity() {
        return (Identity<UserMatchInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserMatchInfoRecord> getPrimaryKey() {
        return Keys.KEY_USER_MATCH_INFO_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserMatchInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK77RPQXPRVI3KDQGPRFWNPO85B);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK77RPQXPRVI3KDQGPRFWNPO85B);

        return _users;
    }

    @Override
    public UserMatchInfo as(String alias) {
        return new UserMatchInfo(DSL.name(alias), this);
    }

    @Override
    public UserMatchInfo as(Name alias) {
        return new UserMatchInfo(alias, this);
    }

    @Override
    public UserMatchInfo as(Table<?> alias) {
        return new UserMatchInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchInfo rename(String name) {
        return new UserMatchInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchInfo rename(Name name) {
        return new UserMatchInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchInfo rename(Table<?> name) {
        return new UserMatchInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, LocalDateTime, Integer, Integer, LocalDateTime, UserMatchInfoMatchStatus, LocalDate, String, String, Integer, UserMatchInfoUserGender, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super LocalDateTime, ? super UserMatchInfoMatchStatus, ? super LocalDate, ? super String, ? super String, ? super Integer, ? super UserMatchInfoUserGender, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super LocalDateTime, ? super UserMatchInfoMatchStatus, ? super LocalDate, ? super String, ? super String, ? super Integer, ? super UserMatchInfoUserGender, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
