/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.NotificationContentRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationContent extends TableImpl<NotificationContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.notification_content</code>
     */
    public static final NotificationContent NOTIFICATION_CONTENT = new NotificationContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationContentRecord> getRecordType() {
        return NotificationContentRecord.class;
    }

    /**
     * The column <code>taste.notification_content.id</code>.
     */
    public final TableField<NotificationContentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.notification_content.created_at</code>.
     */
    public final TableField<NotificationContentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.notification_content.updated_at</code>.
     */
    public final TableField<NotificationContentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.notification_content.content</code>.
     */
    public final TableField<NotificationContentRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.notification_content.redirection_url</code>.
     */
    public final TableField<NotificationContentRecord, String> REDIRECTION_URL = createField(DSL.name("redirection_url"), SQLDataType.VARCHAR(255), this, "");

    private NotificationContent(Name alias, Table<NotificationContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationContent(Name alias, Table<NotificationContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.notification_content</code> table reference
     */
    public NotificationContent(String alias) {
        this(DSL.name(alias), NOTIFICATION_CONTENT);
    }

    /**
     * Create an aliased <code>taste.notification_content</code> table reference
     */
    public NotificationContent(Name alias) {
        this(alias, NOTIFICATION_CONTENT);
    }

    /**
     * Create a <code>taste.notification_content</code> table reference
     */
    public NotificationContent() {
        this(DSL.name("notification_content"), null);
    }

    public <O extends Record> NotificationContent(Table<O> child, ForeignKey<O, NotificationContentRecord> key) {
        super(child, key, NOTIFICATION_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<NotificationContentRecord, Long> getIdentity() {
        return (Identity<NotificationContentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationContentRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_CONTENT_PRIMARY;
    }

    @Override
    public NotificationContent as(String alias) {
        return new NotificationContent(DSL.name(alias), this);
    }

    @Override
    public NotificationContent as(Name alias) {
        return new NotificationContent(alias, this);
    }

    @Override
    public NotificationContent as(Table<?> alias) {
        return new NotificationContent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationContent rename(String name) {
        return new NotificationContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationContent rename(Name name) {
        return new NotificationContent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationContent rename(Table<?> name) {
        return new NotificationContent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
