/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.PartyMatchInfoGender;
import com.example.jooq.enums.PartyMatchInfoMatchStatus;
import com.example.jooq.tables.records.PartyMatchInfoRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyMatchInfo extends TableImpl<PartyMatchInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.party_match_info</code>
     */
    public static final PartyMatchInfo PARTY_MATCH_INFO = new PartyMatchInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyMatchInfoRecord> getRecordType() {
        return PartyMatchInfoRecord.class;
    }

    /**
     * The column <code>taste.party_match_info.id</code>.
     */
    public final TableField<PartyMatchInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.party_match_info.created_at</code>.
     */
    public final TableField<PartyMatchInfoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.party_match_info.max_age</code>.
     */
    public final TableField<PartyMatchInfoRecord, Integer> MAX_AGE = createField(DSL.name("max_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>taste.party_match_info.min_age</code>.
     */
    public final TableField<PartyMatchInfoRecord, Integer> MIN_AGE = createField(DSL.name("min_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>taste.party_match_info.gender</code>.
     */
    public final TableField<PartyMatchInfoRecord, PartyMatchInfoGender> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(6).asEnumDataType(com.example.jooq.enums.PartyMatchInfoGender.class), this, "");

    /**
     * The column <code>taste.party_match_info.match_status</code>.
     */
    public final TableField<PartyMatchInfoRecord, PartyMatchInfoMatchStatus> MATCH_STATUS = createField(DSL.name("match_status"), SQLDataType.VARCHAR(12).asEnumDataType(com.example.jooq.enums.PartyMatchInfoMatchStatus.class), this, "");

    /**
     * The column <code>taste.party_match_info.meeting_date</code>.
     */
    public final TableField<PartyMatchInfoRecord, LocalDate> MEETING_DATE = createField(DSL.name("meeting_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>taste.party_match_info.region</code>.
     */
    public final TableField<PartyMatchInfoRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>taste.party_match_info.party_id</code>.
     */
    public final TableField<PartyMatchInfoRecord, Long> PARTY_ID = createField(DSL.name("party_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.party_match_info.store_id</code>.
     */
    public final TableField<PartyMatchInfoRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT, this, "");

    private PartyMatchInfo(Name alias, Table<PartyMatchInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PartyMatchInfo(Name alias, Table<PartyMatchInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.party_match_info</code> table reference
     */
    public PartyMatchInfo(String alias) {
        this(DSL.name(alias), PARTY_MATCH_INFO);
    }

    /**
     * Create an aliased <code>taste.party_match_info</code> table reference
     */
    public PartyMatchInfo(Name alias) {
        this(alias, PARTY_MATCH_INFO);
    }

    /**
     * Create a <code>taste.party_match_info</code> table reference
     */
    public PartyMatchInfo() {
        this(DSL.name("party_match_info"), null);
    }

    public <O extends Record> PartyMatchInfo(Table<O> child, ForeignKey<O, PartyMatchInfoRecord> key) {
        super(child, key, PARTY_MATCH_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<PartyMatchInfoRecord, Long> getIdentity() {
        return (Identity<PartyMatchInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PartyMatchInfoRecord> getPrimaryKey() {
        return Keys.KEY_PARTY_MATCH_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<PartyMatchInfoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PARTY_MATCH_INFO_UKSCA0UF0GR8UE2UH12RNJE65BP, Keys.KEY_PARTY_MATCH_INFO_UKH85XYBWRODP21ATETKFCFAGRB);
    }

    @Override
    public List<ForeignKey<PartyMatchInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKGLXRVCO5QKYFS2NK7Q1UYBQH6, Keys.FK1IMFYRPJ70NLOMD38O55B708D);
    }

    private transient Party _party;
    private transient Store _store;

    /**
     * Get the implicit join path to the <code>taste.party</code> table.
     */
    public Party party() {
        if (_party == null)
            _party = new Party(this, Keys.FKGLXRVCO5QKYFS2NK7Q1UYBQH6);

        return _party;
    }

    /**
     * Get the implicit join path to the <code>taste.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.FK1IMFYRPJ70NLOMD38O55B708D);

        return _store;
    }

    @Override
    public PartyMatchInfo as(String alias) {
        return new PartyMatchInfo(DSL.name(alias), this);
    }

    @Override
    public PartyMatchInfo as(Name alias) {
        return new PartyMatchInfo(alias, this);
    }

    @Override
    public PartyMatchInfo as(Table<?> alias) {
        return new PartyMatchInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchInfo rename(String name) {
        return new PartyMatchInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchInfo rename(Name name) {
        return new PartyMatchInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchInfo rename(Table<?> name) {
        return new PartyMatchInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, LocalDateTime, Integer, Integer, PartyMatchInfoGender, PartyMatchInfoMatchStatus, LocalDate, String, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super PartyMatchInfoGender, ? super PartyMatchInfoMatchStatus, ? super LocalDate, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super PartyMatchInfoGender, ? super PartyMatchInfoMatchStatus, ? super LocalDate, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
