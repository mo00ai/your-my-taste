/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Taste;
import com.example.jooq.tables.records.UserMatchCondCategorySeqRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchCondCategorySeq extends TableImpl<UserMatchCondCategorySeqRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.user_match_cond_category_seq</code>
     */
    public static final UserMatchCondCategorySeq USER_MATCH_COND_CATEGORY_SEQ = new UserMatchCondCategorySeq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMatchCondCategorySeqRecord> getRecordType() {
        return UserMatchCondCategorySeqRecord.class;
    }

    /**
     * The column <code>taste.user_match_cond_category_seq.next_val</code>.
     */
    public final TableField<UserMatchCondCategorySeqRecord, Long> NEXT_VAL = createField(DSL.name("next_val"), SQLDataType.BIGINT, this, "");

    private UserMatchCondCategorySeq(Name alias, Table<UserMatchCondCategorySeqRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMatchCondCategorySeq(Name alias, Table<UserMatchCondCategorySeqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.user_match_cond_category_seq</code> table
     * reference
     */
    public UserMatchCondCategorySeq(String alias) {
        this(DSL.name(alias), USER_MATCH_COND_CATEGORY_SEQ);
    }

    /**
     * Create an aliased <code>taste.user_match_cond_category_seq</code> table
     * reference
     */
    public UserMatchCondCategorySeq(Name alias) {
        this(alias, USER_MATCH_COND_CATEGORY_SEQ);
    }

    /**
     * Create a <code>taste.user_match_cond_category_seq</code> table reference
     */
    public UserMatchCondCategorySeq() {
        this(DSL.name("user_match_cond_category_seq"), null);
    }

    public <O extends Record> UserMatchCondCategorySeq(Table<O> child, ForeignKey<O, UserMatchCondCategorySeqRecord> key) {
        super(child, key, USER_MATCH_COND_CATEGORY_SEQ);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public UserMatchCondCategorySeq as(String alias) {
        return new UserMatchCondCategorySeq(DSL.name(alias), this);
    }

    @Override
    public UserMatchCondCategorySeq as(Name alias) {
        return new UserMatchCondCategorySeq(alias, this);
    }

    @Override
    public UserMatchCondCategorySeq as(Table<?> alias) {
        return new UserMatchCondCategorySeq(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCondCategorySeq rename(String name) {
        return new UserMatchCondCategorySeq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCondCategorySeq rename(Name name) {
        return new UserMatchCondCategorySeq(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCondCategorySeq rename(Table<?> name) {
        return new UserMatchCondCategorySeq(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
