/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.BoardHashtagRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoardHashtag extends TableImpl<BoardHashtagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.board_hashtag</code>
     */
    public static final BoardHashtag BOARD_HASHTAG = new BoardHashtag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoardHashtagRecord> getRecordType() {
        return BoardHashtagRecord.class;
    }

    /**
     * The column <code>taste.board_hashtag.id</code>.
     */
    public final TableField<BoardHashtagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.board_hashtag.board_id</code>.
     */
    public final TableField<BoardHashtagRecord, Long> BOARD_ID = createField(DSL.name("board_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.board_hashtag.hashtag_id</code>.
     */
    public final TableField<BoardHashtagRecord, Long> HASHTAG_ID = createField(DSL.name("hashtag_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BoardHashtag(Name alias, Table<BoardHashtagRecord> aliased) {
        this(alias, aliased, null);
    }

    private BoardHashtag(Name alias, Table<BoardHashtagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.board_hashtag</code> table reference
     */
    public BoardHashtag(String alias) {
        this(DSL.name(alias), BOARD_HASHTAG);
    }

    /**
     * Create an aliased <code>taste.board_hashtag</code> table reference
     */
    public BoardHashtag(Name alias) {
        this(alias, BOARD_HASHTAG);
    }

    /**
     * Create a <code>taste.board_hashtag</code> table reference
     */
    public BoardHashtag() {
        this(DSL.name("board_hashtag"), null);
    }

    public <O extends Record> BoardHashtag(Table<O> child, ForeignKey<O, BoardHashtagRecord> key) {
        super(child, key, BOARD_HASHTAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<BoardHashtagRecord, Long> getIdentity() {
        return (Identity<BoardHashtagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BoardHashtagRecord> getPrimaryKey() {
        return Keys.KEY_BOARD_HASHTAG_PRIMARY;
    }

    @Override
    public List<ForeignKey<BoardHashtagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKGNJ9SG4E3RU7TA9SA7FSS2NLV, Keys.FK2F8XM9SDI3I2M5R2GBO0968T0);
    }

    private transient Board _board;
    private transient Hashtag _hashtag;

    /**
     * Get the implicit join path to the <code>taste.board</code> table.
     */
    public Board board() {
        if (_board == null)
            _board = new Board(this, Keys.FKGNJ9SG4E3RU7TA9SA7FSS2NLV);

        return _board;
    }

    /**
     * Get the implicit join path to the <code>taste.hashtag</code> table.
     */
    public Hashtag hashtag() {
        if (_hashtag == null)
            _hashtag = new Hashtag(this, Keys.FK2F8XM9SDI3I2M5R2GBO0968T0);

        return _hashtag;
    }

    @Override
    public BoardHashtag as(String alias) {
        return new BoardHashtag(DSL.name(alias), this);
    }

    @Override
    public BoardHashtag as(Name alias) {
        return new BoardHashtag(alias, this);
    }

    @Override
    public BoardHashtag as(Table<?> alias) {
        return new BoardHashtag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardHashtag rename(String name) {
        return new BoardHashtag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardHashtag rename(Name name) {
        return new BoardHashtag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardHashtag rename(Table<?> name) {
        return new BoardHashtag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
