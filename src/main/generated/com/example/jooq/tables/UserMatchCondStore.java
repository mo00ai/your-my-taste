/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.UserMatchCondStoreRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMatchCondStore extends TableImpl<UserMatchCondStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.user_match_cond_store</code>
     */
    public static final UserMatchCondStore USER_MATCH_COND_STORE = new UserMatchCondStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMatchCondStoreRecord> getRecordType() {
        return UserMatchCondStoreRecord.class;
    }

    /**
     * The column <code>taste.user_match_cond_store.id</code>.
     */
    public final TableField<UserMatchCondStoreRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.user_match_cond_store.store_id</code>.
     */
    public final TableField<UserMatchCondStoreRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>taste.user_match_cond_store.user_match_cond_id</code>.
     */
    public final TableField<UserMatchCondStoreRecord, Long> USER_MATCH_COND_ID = createField(DSL.name("user_match_cond_id"), SQLDataType.BIGINT, this, "");

    private UserMatchCondStore(Name alias, Table<UserMatchCondStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMatchCondStore(Name alias, Table<UserMatchCondStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.user_match_cond_store</code> table
     * reference
     */
    public UserMatchCondStore(String alias) {
        this(DSL.name(alias), USER_MATCH_COND_STORE);
    }

    /**
     * Create an aliased <code>taste.user_match_cond_store</code> table
     * reference
     */
    public UserMatchCondStore(Name alias) {
        this(alias, USER_MATCH_COND_STORE);
    }

    /**
     * Create a <code>taste.user_match_cond_store</code> table reference
     */
    public UserMatchCondStore() {
        this(DSL.name("user_match_cond_store"), null);
    }

    public <O extends Record> UserMatchCondStore(Table<O> child, ForeignKey<O, UserMatchCondStoreRecord> key) {
        super(child, key, USER_MATCH_COND_STORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public UniqueKey<UserMatchCondStoreRecord> getPrimaryKey() {
        return Keys.KEY_USER_MATCH_COND_STORE_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserMatchCondStoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKQ1MECNN3CY0SHOSO13LUBHUX7, Keys.FKA7O5BQPRXPEGM1YKUSNW5L21H);
    }

    private transient Store _store;
    private transient UserMatchCond _userMatchCond;

    /**
     * Get the implicit join path to the <code>taste.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.FKQ1MECNN3CY0SHOSO13LUBHUX7);

        return _store;
    }

    /**
     * Get the implicit join path to the <code>taste.user_match_cond</code>
     * table.
     */
    public UserMatchCond userMatchCond() {
        if (_userMatchCond == null)
            _userMatchCond = new UserMatchCond(this, Keys.FKA7O5BQPRXPEGM1YKUSNW5L21H);

        return _userMatchCond;
    }

    @Override
    public UserMatchCondStore as(String alias) {
        return new UserMatchCondStore(DSL.name(alias), this);
    }

    @Override
    public UserMatchCondStore as(Name alias) {
        return new UserMatchCondStore(alias, this);
    }

    @Override
    public UserMatchCondStore as(Table<?> alias) {
        return new UserMatchCondStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCondStore rename(String name) {
        return new UserMatchCondStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCondStore rename(Name name) {
        return new UserMatchCondStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMatchCondStore rename(Table<?> name) {
        return new UserMatchCondStore(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
