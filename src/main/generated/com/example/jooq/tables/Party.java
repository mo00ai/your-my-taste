/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.PartyPartyStatus;
import com.example.jooq.tables.records.PartyRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Party extends TableImpl<PartyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.party</code>
     */
    public static final Party PARTY = new Party();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyRecord> getRecordType() {
        return PartyRecord.class;
    }

    /**
     * The column <code>taste.party.id</code>.
     */
    public final TableField<PartyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.party.created_at</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.party.description</code>.
     */
    public final TableField<PartyRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>taste.party.enable_random_matching</code>.
     */
    public final TableField<PartyRecord, Boolean> ENABLE_RANDOM_MATCHING = createField(DSL.name("enable_random_matching"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>taste.party.max_members</code>.
     */
    public final TableField<PartyRecord, Integer> MAX_MEMBERS = createField(DSL.name("max_members"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.party.meeting_time</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> MEETING_TIME = createField(DSL.name("meeting_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.party.now_members</code>.
     */
    public final TableField<PartyRecord, Integer> NOW_MEMBERS = createField(DSL.name("now_members"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.party.party_status</code>.
     */
    public final TableField<PartyRecord, PartyPartyStatus> PARTY_STATUS = createField(DSL.name("party_status"), SQLDataType.VARCHAR(10).nullable(false).asEnumDataType(com.example.jooq.enums.PartyPartyStatus.class), this, "");

    /**
     * The column <code>taste.party.title</code>.
     */
    public final TableField<PartyRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.party.user_id</code>.
     */
    public final TableField<PartyRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.party.store_id</code>.
     */
    public final TableField<PartyRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.party.meeting_date</code>.
     */
    public final TableField<PartyRecord, LocalDate> MEETING_DATE = createField(DSL.name("meeting_date"), SQLDataType.LOCALDATE, this, "");

    private Party(Name alias, Table<PartyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Party(Name alias, Table<PartyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.party</code> table reference
     */
    public Party(String alias) {
        this(DSL.name(alias), PARTY);
    }

    /**
     * Create an aliased <code>taste.party</code> table reference
     */
    public Party(Name alias) {
        this(alias, PARTY);
    }

    /**
     * Create a <code>taste.party</code> table reference
     */
    public Party() {
        this(DSL.name("party"), null);
    }

    public <O extends Record> Party(Table<O> child, ForeignKey<O, PartyRecord> key) {
        super(child, key, PARTY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<PartyRecord, Long> getIdentity() {
        return (Identity<PartyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PartyRecord> getPrimaryKey() {
        return Keys.KEY_PARTY_PRIMARY;
    }

    @Override
    public List<ForeignKey<PartyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKOVYVFDS7DJ7UNWVQUF3687J3I, Keys.FKGTE0CH57RDJR9Y17L6DTNP6OA);
    }

    private transient Users _users;
    private transient Store _store;

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FKOVYVFDS7DJ7UNWVQUF3687J3I);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>taste.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.FKGTE0CH57RDJR9Y17L6DTNP6OA);

        return _store;
    }

    @Override
    public Party as(String alias) {
        return new Party(DSL.name(alias), this);
    }

    @Override
    public Party as(Name alias) {
        return new Party(alias, this);
    }

    @Override
    public Party as(Table<?> alias) {
        return new Party(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Party rename(String name) {
        return new Party(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Party rename(Name name) {
        return new Party(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Party rename(Table<?> name) {
        return new Party(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, LocalDateTime, String, Boolean, Integer, LocalDateTime, Integer, PartyPartyStatus, String, Long, Long, LocalDate> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super LocalDateTime, ? super String, ? super Boolean, ? super Integer, ? super LocalDateTime, ? super Integer, ? super PartyPartyStatus, ? super String, ? super Long, ? super Long, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super LocalDateTime, ? super String, ? super Boolean, ? super Integer, ? super LocalDateTime, ? super Integer, ? super PartyPartyStatus, ? super String, ? super Long, ? super Long, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
