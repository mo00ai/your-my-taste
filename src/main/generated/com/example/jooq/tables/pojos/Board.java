/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.pojos;


import com.example.jooq.enums.BoardAccessPolicy;
import com.example.jooq.enums.BoardType;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Board implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createdAt;
    private LocalDateTime deletedAt;
    private LocalDateTime updatedAt;
    private String contents;
    private Integer openLimit;
    private LocalDateTime openTime;
    private BoardAccessPolicy accessPolicy;
    private String title;
    private BoardType type;
    private Long storeId;
    private Long userId;

    public Board() {}

    public Board(Board value) {
        this.id = value.id;
        this.createdAt = value.createdAt;
        this.deletedAt = value.deletedAt;
        this.updatedAt = value.updatedAt;
        this.contents = value.contents;
        this.openLimit = value.openLimit;
        this.openTime = value.openTime;
        this.accessPolicy = value.accessPolicy;
        this.title = value.title;
        this.type = value.type;
        this.storeId = value.storeId;
        this.userId = value.userId;
    }

    public Board(
        Long id,
        LocalDateTime createdAt,
        LocalDateTime deletedAt,
        LocalDateTime updatedAt,
        String contents,
        Integer openLimit,
        LocalDateTime openTime,
        BoardAccessPolicy accessPolicy,
        String title,
        BoardType type,
        Long storeId,
        Long userId
    ) {
        this.id = id;
        this.createdAt = createdAt;
        this.deletedAt = deletedAt;
        this.updatedAt = updatedAt;
        this.contents = contents;
        this.openLimit = openLimit;
        this.openTime = openTime;
        this.accessPolicy = accessPolicy;
        this.title = title;
        this.type = type;
        this.storeId = storeId;
        this.userId = userId;
    }

    /**
     * Getter for <code>taste.board.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>taste.board.id</code>.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>taste.board.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>taste.board.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>taste.board.deleted_at</code>.
     */
    public LocalDateTime getDeletedAt() {
        return this.deletedAt;
    }

    /**
     * Setter for <code>taste.board.deleted_at</code>.
     */
    public void setDeletedAt(LocalDateTime deletedAt) {
        this.deletedAt = deletedAt;
    }

    /**
     * Getter for <code>taste.board.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>taste.board.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for <code>taste.board.contents</code>.
     */
    public String getContents() {
        return this.contents;
    }

    /**
     * Setter for <code>taste.board.contents</code>.
     */
    public void setContents(String contents) {
        this.contents = contents;
    }

    /**
     * Getter for <code>taste.board.open_limit</code>.
     */
    public Integer getOpenLimit() {
        return this.openLimit;
    }

    /**
     * Setter for <code>taste.board.open_limit</code>.
     */
    public void setOpenLimit(Integer openLimit) {
        this.openLimit = openLimit;
    }

    /**
     * Getter for <code>taste.board.open_time</code>.
     */
    public LocalDateTime getOpenTime() {
        return this.openTime;
    }

    /**
     * Setter for <code>taste.board.open_time</code>.
     */
    public void setOpenTime(LocalDateTime openTime) {
        this.openTime = openTime;
    }

    /**
     * Getter for <code>taste.board.access_policy</code>.
     */
    public BoardAccessPolicy getAccessPolicy() {
        return this.accessPolicy;
    }

    /**
     * Setter for <code>taste.board.access_policy</code>.
     */
    public void setAccessPolicy(BoardAccessPolicy accessPolicy) {
        this.accessPolicy = accessPolicy;
    }

    /**
     * Getter for <code>taste.board.title</code>.
     */
    public String getTitle() {
        return this.title;
    }

    /**
     * Setter for <code>taste.board.title</code>.
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for <code>taste.board.type</code>.
     */
    public BoardType getType() {
        return this.type;
    }

    /**
     * Setter for <code>taste.board.type</code>.
     */
    public void setType(BoardType type) {
        this.type = type;
    }

    /**
     * Getter for <code>taste.board.store_id</code>.
     */
    public Long getStoreId() {
        return this.storeId;
    }

    /**
     * Setter for <code>taste.board.store_id</code>.
     */
    public void setStoreId(Long storeId) {
        this.storeId = storeId;
    }

    /**
     * Getter for <code>taste.board.user_id</code>.
     */
    public Long getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>taste.board.user_id</code>.
     */
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Board other = (Board) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.deletedAt == null) {
            if (other.deletedAt != null)
                return false;
        }
        else if (!this.deletedAt.equals(other.deletedAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.contents == null) {
            if (other.contents != null)
                return false;
        }
        else if (!this.contents.equals(other.contents))
            return false;
        if (this.openLimit == null) {
            if (other.openLimit != null)
                return false;
        }
        else if (!this.openLimit.equals(other.openLimit))
            return false;
        if (this.openTime == null) {
            if (other.openTime != null)
                return false;
        }
        else if (!this.openTime.equals(other.openTime))
            return false;
        if (this.accessPolicy == null) {
            if (other.accessPolicy != null)
                return false;
        }
        else if (!this.accessPolicy.equals(other.accessPolicy))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.storeId == null) {
            if (other.storeId != null)
                return false;
        }
        else if (!this.storeId.equals(other.storeId))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.deletedAt == null) ? 0 : this.deletedAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.contents == null) ? 0 : this.contents.hashCode());
        result = prime * result + ((this.openLimit == null) ? 0 : this.openLimit.hashCode());
        result = prime * result + ((this.openTime == null) ? 0 : this.openTime.hashCode());
        result = prime * result + ((this.accessPolicy == null) ? 0 : this.accessPolicy.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.storeId == null) ? 0 : this.storeId.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Board (");

        sb.append(id);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(deletedAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(contents);
        sb.append(", ").append(openLimit);
        sb.append(", ").append(openTime);
        sb.append(", ").append(accessPolicy);
        sb.append(", ").append(title);
        sb.append(", ").append(type);
        sb.append(", ").append(storeId);
        sb.append(", ").append(userId);

        sb.append(")");
        return sb.toString();
    }
}
