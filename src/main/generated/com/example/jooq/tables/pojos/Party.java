/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.pojos;


import com.example.jooq.enums.PartyPartyStatus;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Party implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createdAt;
    private String description;
    private Boolean enableRandomMatching;
    private Integer maxMembers;
    private LocalDateTime meetingTime;
    private Integer nowMembers;
    private PartyPartyStatus partyStatus;
    private String title;
    private Long userId;
    private Long storeId;
    private LocalDate meetingDate;

    public Party() {}

    public Party(Party value) {
        this.id = value.id;
        this.createdAt = value.createdAt;
        this.description = value.description;
        this.enableRandomMatching = value.enableRandomMatching;
        this.maxMembers = value.maxMembers;
        this.meetingTime = value.meetingTime;
        this.nowMembers = value.nowMembers;
        this.partyStatus = value.partyStatus;
        this.title = value.title;
        this.userId = value.userId;
        this.storeId = value.storeId;
        this.meetingDate = value.meetingDate;
    }

    public Party(
        Long id,
        LocalDateTime createdAt,
        String description,
        Boolean enableRandomMatching,
        Integer maxMembers,
        LocalDateTime meetingTime,
        Integer nowMembers,
        PartyPartyStatus partyStatus,
        String title,
        Long userId,
        Long storeId,
        LocalDate meetingDate
    ) {
        this.id = id;
        this.createdAt = createdAt;
        this.description = description;
        this.enableRandomMatching = enableRandomMatching;
        this.maxMembers = maxMembers;
        this.meetingTime = meetingTime;
        this.nowMembers = nowMembers;
        this.partyStatus = partyStatus;
        this.title = title;
        this.userId = userId;
        this.storeId = storeId;
        this.meetingDate = meetingDate;
    }

    /**
     * Getter for <code>taste.party.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>taste.party.id</code>.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>taste.party.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>taste.party.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>taste.party.description</code>.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>taste.party.description</code>.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for <code>taste.party.enable_random_matching</code>.
     */
    public Boolean getEnableRandomMatching() {
        return this.enableRandomMatching;
    }

    /**
     * Setter for <code>taste.party.enable_random_matching</code>.
     */
    public void setEnableRandomMatching(Boolean enableRandomMatching) {
        this.enableRandomMatching = enableRandomMatching;
    }

    /**
     * Getter for <code>taste.party.max_members</code>.
     */
    public Integer getMaxMembers() {
        return this.maxMembers;
    }

    /**
     * Setter for <code>taste.party.max_members</code>.
     */
    public void setMaxMembers(Integer maxMembers) {
        this.maxMembers = maxMembers;
    }

    /**
     * Getter for <code>taste.party.meeting_time</code>.
     */
    public LocalDateTime getMeetingTime() {
        return this.meetingTime;
    }

    /**
     * Setter for <code>taste.party.meeting_time</code>.
     */
    public void setMeetingTime(LocalDateTime meetingTime) {
        this.meetingTime = meetingTime;
    }

    /**
     * Getter for <code>taste.party.now_members</code>.
     */
    public Integer getNowMembers() {
        return this.nowMembers;
    }

    /**
     * Setter for <code>taste.party.now_members</code>.
     */
    public void setNowMembers(Integer nowMembers) {
        this.nowMembers = nowMembers;
    }

    /**
     * Getter for <code>taste.party.party_status</code>.
     */
    public PartyPartyStatus getPartyStatus() {
        return this.partyStatus;
    }

    /**
     * Setter for <code>taste.party.party_status</code>.
     */
    public void setPartyStatus(PartyPartyStatus partyStatus) {
        this.partyStatus = partyStatus;
    }

    /**
     * Getter for <code>taste.party.title</code>.
     */
    public String getTitle() {
        return this.title;
    }

    /**
     * Setter for <code>taste.party.title</code>.
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for <code>taste.party.user_id</code>.
     */
    public Long getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>taste.party.user_id</code>.
     */
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /**
     * Getter for <code>taste.party.store_id</code>.
     */
    public Long getStoreId() {
        return this.storeId;
    }

    /**
     * Setter for <code>taste.party.store_id</code>.
     */
    public void setStoreId(Long storeId) {
        this.storeId = storeId;
    }

    /**
     * Getter for <code>taste.party.meeting_date</code>.
     */
    public LocalDate getMeetingDate() {
        return this.meetingDate;
    }

    /**
     * Setter for <code>taste.party.meeting_date</code>.
     */
    public void setMeetingDate(LocalDate meetingDate) {
        this.meetingDate = meetingDate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Party other = (Party) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.enableRandomMatching == null) {
            if (other.enableRandomMatching != null)
                return false;
        }
        else if (!this.enableRandomMatching.equals(other.enableRandomMatching))
            return false;
        if (this.maxMembers == null) {
            if (other.maxMembers != null)
                return false;
        }
        else if (!this.maxMembers.equals(other.maxMembers))
            return false;
        if (this.meetingTime == null) {
            if (other.meetingTime != null)
                return false;
        }
        else if (!this.meetingTime.equals(other.meetingTime))
            return false;
        if (this.nowMembers == null) {
            if (other.nowMembers != null)
                return false;
        }
        else if (!this.nowMembers.equals(other.nowMembers))
            return false;
        if (this.partyStatus == null) {
            if (other.partyStatus != null)
                return false;
        }
        else if (!this.partyStatus.equals(other.partyStatus))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.storeId == null) {
            if (other.storeId != null)
                return false;
        }
        else if (!this.storeId.equals(other.storeId))
            return false;
        if (this.meetingDate == null) {
            if (other.meetingDate != null)
                return false;
        }
        else if (!this.meetingDate.equals(other.meetingDate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.enableRandomMatching == null) ? 0 : this.enableRandomMatching.hashCode());
        result = prime * result + ((this.maxMembers == null) ? 0 : this.maxMembers.hashCode());
        result = prime * result + ((this.meetingTime == null) ? 0 : this.meetingTime.hashCode());
        result = prime * result + ((this.nowMembers == null) ? 0 : this.nowMembers.hashCode());
        result = prime * result + ((this.partyStatus == null) ? 0 : this.partyStatus.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.storeId == null) ? 0 : this.storeId.hashCode());
        result = prime * result + ((this.meetingDate == null) ? 0 : this.meetingDate.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Party (");

        sb.append(id);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(description);
        sb.append(", ").append(enableRandomMatching);
        sb.append(", ").append(maxMembers);
        sb.append(", ").append(meetingTime);
        sb.append(", ").append(nowMembers);
        sb.append(", ").append(partyStatus);
        sb.append(", ").append(title);
        sb.append(", ").append(userId);
        sb.append(", ").append(storeId);
        sb.append(", ").append(meetingDate);

        sb.append(")");
        return sb.toString();
    }
}
