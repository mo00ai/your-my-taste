/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String contents;
    private LocalDateTime deletedAt;
    private Long boardId;
    private Long parentComment;
    private Long rootComment;
    private Long userId;

    public Comment() {}

    public Comment(Comment value) {
        this.id = value.id;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.contents = value.contents;
        this.deletedAt = value.deletedAt;
        this.boardId = value.boardId;
        this.parentComment = value.parentComment;
        this.rootComment = value.rootComment;
        this.userId = value.userId;
    }

    public Comment(
        Long id,
        LocalDateTime createdAt,
        LocalDateTime updatedAt,
        String contents,
        LocalDateTime deletedAt,
        Long boardId,
        Long parentComment,
        Long rootComment,
        Long userId
    ) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.contents = contents;
        this.deletedAt = deletedAt;
        this.boardId = boardId;
        this.parentComment = parentComment;
        this.rootComment = rootComment;
        this.userId = userId;
    }

    /**
     * Getter for <code>taste.comment.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>taste.comment.id</code>.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>taste.comment.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>taste.comment.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>taste.comment.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>taste.comment.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for <code>taste.comment.contents</code>.
     */
    public String getContents() {
        return this.contents;
    }

    /**
     * Setter for <code>taste.comment.contents</code>.
     */
    public void setContents(String contents) {
        this.contents = contents;
    }

    /**
     * Getter for <code>taste.comment.deleted_at</code>.
     */
    public LocalDateTime getDeletedAt() {
        return this.deletedAt;
    }

    /**
     * Setter for <code>taste.comment.deleted_at</code>.
     */
    public void setDeletedAt(LocalDateTime deletedAt) {
        this.deletedAt = deletedAt;
    }

    /**
     * Getter for <code>taste.comment.board_id</code>.
     */
    public Long getBoardId() {
        return this.boardId;
    }

    /**
     * Setter for <code>taste.comment.board_id</code>.
     */
    public void setBoardId(Long boardId) {
        this.boardId = boardId;
    }

    /**
     * Getter for <code>taste.comment.parent_comment</code>.
     */
    public Long getParentComment() {
        return this.parentComment;
    }

    /**
     * Setter for <code>taste.comment.parent_comment</code>.
     */
    public void setParentComment(Long parentComment) {
        this.parentComment = parentComment;
    }

    /**
     * Getter for <code>taste.comment.root_comment</code>.
     */
    public Long getRootComment() {
        return this.rootComment;
    }

    /**
     * Setter for <code>taste.comment.root_comment</code>.
     */
    public void setRootComment(Long rootComment) {
        this.rootComment = rootComment;
    }

    /**
     * Getter for <code>taste.comment.user_id</code>.
     */
    public Long getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>taste.comment.user_id</code>.
     */
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Comment other = (Comment) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.contents == null) {
            if (other.contents != null)
                return false;
        }
        else if (!this.contents.equals(other.contents))
            return false;
        if (this.deletedAt == null) {
            if (other.deletedAt != null)
                return false;
        }
        else if (!this.deletedAt.equals(other.deletedAt))
            return false;
        if (this.boardId == null) {
            if (other.boardId != null)
                return false;
        }
        else if (!this.boardId.equals(other.boardId))
            return false;
        if (this.parentComment == null) {
            if (other.parentComment != null)
                return false;
        }
        else if (!this.parentComment.equals(other.parentComment))
            return false;
        if (this.rootComment == null) {
            if (other.rootComment != null)
                return false;
        }
        else if (!this.rootComment.equals(other.rootComment))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.contents == null) ? 0 : this.contents.hashCode());
        result = prime * result + ((this.deletedAt == null) ? 0 : this.deletedAt.hashCode());
        result = prime * result + ((this.boardId == null) ? 0 : this.boardId.hashCode());
        result = prime * result + ((this.parentComment == null) ? 0 : this.parentComment.hashCode());
        result = prime * result + ((this.rootComment == null) ? 0 : this.rootComment.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Comment (");

        sb.append(id);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(contents);
        sb.append(", ").append(deletedAt);
        sb.append(", ").append(boardId);
        sb.append(", ").append(parentComment);
        sb.append(", ").append(rootComment);
        sb.append(", ").append(userId);

        sb.append(")");
        return sb.toString();
    }
}
