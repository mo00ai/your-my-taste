/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.UsersGender;
import com.example.jooq.enums.UsersLevel;
import com.example.jooq.enums.UsersRole;
import com.example.jooq.tables.records.UsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>taste.users.id</code>.
     */
    public final TableField<UsersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.users.created_at</code>.
     */
    public final TableField<UsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.users.deleted_at</code>.
     */
    public final TableField<UsersRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.users.updated_at</code>.
     */
    public final TableField<UsersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.users.address</code>.
     */
    public final TableField<UsersRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.users.age</code>.
     */
    public final TableField<UsersRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.users.follower</code>.
     */
    public final TableField<UsersRecord, Integer> FOLLOWER = createField(DSL.name("follower"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.users.following</code>.
     */
    public final TableField<UsersRecord, Integer> FOLLOWING = createField(DSL.name("following"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.users.gender</code>.
     */
    public final TableField<UsersRecord, UsersGender> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(6).asEnumDataType(com.example.jooq.enums.UsersGender.class), this, "");

    /**
     * The column <code>taste.users.level</code>.
     */
    public final TableField<UsersRecord, UsersLevel> LEVEL = createField(DSL.name("level"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(com.example.jooq.enums.UsersLevel.class), this, "");

    /**
     * The column <code>taste.users.nickname</code>.
     */
    public final TableField<UsersRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.users.password</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.users.point</code>.
     */
    public final TableField<UsersRecord, Integer> POINT = createField(DSL.name("point"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.users.posting_count</code>.
     */
    public final TableField<UsersRecord, Integer> POSTING_COUNT = createField(DSL.name("posting_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.users.role</code>.
     */
    public final TableField<UsersRecord, UsersRole> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(5).nullable(false).asEnumDataType(com.example.jooq.enums.UsersRole.class), this, "");

    /**
     * The column <code>taste.users.image_id</code>.
     */
    public final TableField<UsersRecord, Long> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.BIGINT, this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>taste.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>taste.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<UsersRecord, Long> getIdentity() {
        return (Identity<UsersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_USERS_UK6DOTKOTT2KJSP8VW4D0M25FB7, Keys.KEY_USERS_UK94DJ9RY3K3TMCSYG8EATP7VVN);
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKLQJ25C28SWU46S4JBUDD7HORE);
    }

    private transient Image _image;

    /**
     * Get the implicit join path to the <code>taste.image</code> table.
     */
    public Image image() {
        if (_image == null)
            _image = new Image(this, Keys.FKLQJ25C28SWU46S4JBUDD7HORE);

        return _image;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, LocalDateTime, LocalDateTime, LocalDateTime, String, Integer, String, Integer, Integer, UsersGender, UsersLevel, String, String, Integer, Integer, UsersRole, Long> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super UsersGender, ? super UsersLevel, ? super String, ? super String, ? super Integer, ? super Integer, ? super UsersRole, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super UsersGender, ? super UsersLevel, ? super String, ? super String, ? super Integer, ? super Integer, ? super UsersRole, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
