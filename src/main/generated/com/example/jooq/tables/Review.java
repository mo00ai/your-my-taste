/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.ReviewRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Review extends TableImpl<ReviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.review</code>
     */
    public static final Review REVIEW = new Review();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewRecord> getRecordType() {
        return ReviewRecord.class;
    }

    /**
     * The column <code>taste.review.id</code>.
     */
    public final TableField<ReviewRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.review.created_at</code>.
     */
    public final TableField<ReviewRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.review.updated_at</code>.
     */
    public final TableField<ReviewRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.review.contents</code>.
     */
    public final TableField<ReviewRecord, String> CONTENTS = createField(DSL.name("contents"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.review.is_presented</code>.
     */
    public final TableField<ReviewRecord, Boolean> IS_PRESENTED = createField(DSL.name("is_presented"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>taste.review.is_validated</code>.
     */
    public final TableField<ReviewRecord, Boolean> IS_VALIDATED = createField(DSL.name("is_validated"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>taste.review.score</code>.
     */
    public final TableField<ReviewRecord, Byte> SCORE = createField(DSL.name("score"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>taste.review.image_id</code>.
     */
    public final TableField<ReviewRecord, Long> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>taste.review.store_id</code>.
     */
    public final TableField<ReviewRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.review.user_id</code>.
     */
    public final TableField<ReviewRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Review(Name alias, Table<ReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private Review(Name alias, Table<ReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.review</code> table reference
     */
    public Review(String alias) {
        this(DSL.name(alias), REVIEW);
    }

    /**
     * Create an aliased <code>taste.review</code> table reference
     */
    public Review(Name alias) {
        this(alias, REVIEW);
    }

    /**
     * Create a <code>taste.review</code> table reference
     */
    public Review() {
        this(DSL.name("review"), null);
    }

    public <O extends Record> Review(Table<O> child, ForeignKey<O, ReviewRecord> key) {
        super(child, key, REVIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<ReviewRecord, Long> getIdentity() {
        return (Identity<ReviewRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReviewRecord> getPrimaryKey() {
        return Keys.KEY_REVIEW_PRIMARY;
    }

    @Override
    public List<UniqueKey<ReviewRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_REVIEW_UKC6CGB1AWBHKDHSVGYKDX8IKQ3);
    }

    @Override
    public List<ForeignKey<ReviewRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK2BU91X77T5EA5NB14E39MQCQS, Keys.FK74D12BA8SXXU9VPNC59B43Y30, Keys.FK6CPW2NLKLBLPVC7HYT7KO6V3E);
    }

    private transient Image _image;
    private transient Store _store;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.image</code> table.
     */
    public Image image() {
        if (_image == null)
            _image = new Image(this, Keys.FK2BU91X77T5EA5NB14E39MQCQS);

        return _image;
    }

    /**
     * Get the implicit join path to the <code>taste.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.FK74D12BA8SXXU9VPNC59B43Y30);

        return _store;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK6CPW2NLKLBLPVC7HYT7KO6V3E);

        return _users;
    }

    @Override
    public Review as(String alias) {
        return new Review(DSL.name(alias), this);
    }

    @Override
    public Review as(Name alias) {
        return new Review(alias, this);
    }

    @Override
    public Review as(Table<?> alias) {
        return new Review(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(String name) {
        return new Review(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Name name) {
        return new Review(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Table<?> name) {
        return new Review(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, LocalDateTime, LocalDateTime, String, Boolean, Boolean, Byte, Long, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Boolean, ? super Boolean, ? super Byte, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Boolean, ? super Boolean, ? super Byte, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
