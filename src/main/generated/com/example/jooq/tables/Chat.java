/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.tables.records.ChatRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chat extends TableImpl<ChatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.chat</code>
     */
    public static final Chat CHAT = new Chat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatRecord> getRecordType() {
        return ChatRecord.class;
    }

    /**
     * The column <code>taste.chat.id</code>.
     */
    public final TableField<ChatRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.chat.created_at</code>.
     */
    public final TableField<ChatRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.chat.message</code>.
     */
    public final TableField<ChatRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taste.chat.party_id</code>.
     */
    public final TableField<ChatRecord, Long> PARTY_ID = createField(DSL.name("party_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taste.chat.user_id</code>.
     */
    public final TableField<ChatRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Chat(Name alias, Table<ChatRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chat(Name alias, Table<ChatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.chat</code> table reference
     */
    public Chat(String alias) {
        this(DSL.name(alias), CHAT);
    }

    /**
     * Create an aliased <code>taste.chat</code> table reference
     */
    public Chat(Name alias) {
        this(alias, CHAT);
    }

    /**
     * Create a <code>taste.chat</code> table reference
     */
    public Chat() {
        this(DSL.name("chat"), null);
    }

    public <O extends Record> Chat(Table<O> child, ForeignKey<O, ChatRecord> key) {
        super(child, key, CHAT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<ChatRecord, Long> getIdentity() {
        return (Identity<ChatRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatRecord> getPrimaryKey() {
        return Keys.KEY_CHAT_PRIMARY;
    }

    @Override
    public List<ForeignKey<ChatRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKAN05U3WEEWKNA57ITEOYKMQE2, Keys.FK1X766U663L7M0MXUJ0O72MUU);
    }

    private transient Party _party;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>taste.party</code> table.
     */
    public Party party() {
        if (_party == null)
            _party = new Party(this, Keys.FKAN05U3WEEWKNA57ITEOYKMQE2);

        return _party;
    }

    /**
     * Get the implicit join path to the <code>taste.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK1X766U663L7M0MXUJ0O72MUU);

        return _users;
    }

    @Override
    public Chat as(String alias) {
        return new Chat(DSL.name(alias), this);
    }

    @Override
    public Chat as(Name alias) {
        return new Chat(alias, this);
    }

    @Override
    public Chat as(Table<?> alias) {
        return new Chat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(String name) {
        return new Chat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(Name name) {
        return new Chat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(Table<?> name) {
        return new Chat(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, String, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDateTime, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDateTime, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
