/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Taste;
import com.example.jooq.enums.PartyMatchCondGender;
import com.example.jooq.enums.PartyMatchCondMatchingStatus;
import com.example.jooq.tables.records.PartyMatchCondRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyMatchCond extends TableImpl<PartyMatchCondRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taste.party_match_cond</code>
     */
    public static final PartyMatchCond PARTY_MATCH_COND = new PartyMatchCond();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyMatchCondRecord> getRecordType() {
        return PartyMatchCondRecord.class;
    }

    /**
     * The column <code>taste.party_match_cond.id</code>.
     */
    public final TableField<PartyMatchCondRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taste.party_match_cond.created_at</code>.
     */
    public final TableField<PartyMatchCondRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>taste.party_match_cond.age_max_range</code>.
     */
    public final TableField<PartyMatchCondRecord, Integer> AGE_MAX_RANGE = createField(DSL.name("age_max_range"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.party_match_cond.age_min_range</code>.
     */
    public final TableField<PartyMatchCondRecord, Integer> AGE_MIN_RANGE = createField(DSL.name("age_min_range"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taste.party_match_cond.gender</code>.
     */
    public final TableField<PartyMatchCondRecord, PartyMatchCondGender> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(6).asEnumDataType(com.example.jooq.enums.PartyMatchCondGender.class), this, "");

    /**
     * The column <code>taste.party_match_cond.matching_status</code>.
     */
    public final TableField<PartyMatchCondRecord, PartyMatchCondMatchingStatus> MATCHING_STATUS = createField(DSL.name("matching_status"), SQLDataType.VARCHAR(12).asEnumDataType(com.example.jooq.enums.PartyMatchCondMatchingStatus.class), this, "");

    /**
     * The column <code>taste.party_match_cond.region</code>.
     */
    public final TableField<PartyMatchCondRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>taste.party_match_cond.party_id</code>.
     */
    public final TableField<PartyMatchCondRecord, Long> PARTY_ID = createField(DSL.name("party_id"), SQLDataType.BIGINT, this, "");

    private PartyMatchCond(Name alias, Table<PartyMatchCondRecord> aliased) {
        this(alias, aliased, null);
    }

    private PartyMatchCond(Name alias, Table<PartyMatchCondRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taste.party_match_cond</code> table reference
     */
    public PartyMatchCond(String alias) {
        this(DSL.name(alias), PARTY_MATCH_COND);
    }

    /**
     * Create an aliased <code>taste.party_match_cond</code> table reference
     */
    public PartyMatchCond(Name alias) {
        this(alias, PARTY_MATCH_COND);
    }

    /**
     * Create a <code>taste.party_match_cond</code> table reference
     */
    public PartyMatchCond() {
        this(DSL.name("party_match_cond"), null);
    }

    public <O extends Record> PartyMatchCond(Table<O> child, ForeignKey<O, PartyMatchCondRecord> key) {
        super(child, key, PARTY_MATCH_COND);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taste.TASTE;
    }

    @Override
    public Identity<PartyMatchCondRecord, Long> getIdentity() {
        return (Identity<PartyMatchCondRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PartyMatchCondRecord> getPrimaryKey() {
        return Keys.KEY_PARTY_MATCH_COND_PRIMARY;
    }

    @Override
    public List<UniqueKey<PartyMatchCondRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PARTY_MATCH_COND_UK4XB1E30M93966J3SUDTB89MQL);
    }

    @Override
    public List<ForeignKey<PartyMatchCondRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKB7BW6PPMJC1A85AKKW5NOUW7);
    }

    private transient Party _party;

    /**
     * Get the implicit join path to the <code>taste.party</code> table.
     */
    public Party party() {
        if (_party == null)
            _party = new Party(this, Keys.FKB7BW6PPMJC1A85AKKW5NOUW7);

        return _party;
    }

    @Override
    public PartyMatchCond as(String alias) {
        return new PartyMatchCond(DSL.name(alias), this);
    }

    @Override
    public PartyMatchCond as(Name alias) {
        return new PartyMatchCond(alias, this);
    }

    @Override
    public PartyMatchCond as(Table<?> alias) {
        return new PartyMatchCond(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchCond rename(String name) {
        return new PartyMatchCond(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchCond rename(Name name) {
        return new PartyMatchCond(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyMatchCond rename(Table<?> name) {
        return new PartyMatchCond(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDateTime, Integer, Integer, PartyMatchCondGender, PartyMatchCondMatchingStatus, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super PartyMatchCondGender, ? super PartyMatchCondMatchingStatus, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? super PartyMatchCondGender, ? super PartyMatchCondMatchingStatus, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
