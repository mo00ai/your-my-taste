plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'nu.studer.jooq' version '8.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

checkstyle {
    maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail을 내고 싶다면 이 선언을 추가한다.
    configFile = file("${rootDir}/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${rootDir}/naver-checkstyle-suppressions.xml"]
    toolVersion = "10.3"  // checkstyle 버전 8.24 이상 선언
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Batch + Quartz
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    testImplementation 'org.springframework.batch:spring-batch-test'
    implementation 'com.mchange:c3p0:0.9.5.5'

    // Spring starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // DB
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Validation
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:2.1.1"

    // Image 검증
    implementation 'org.apache.tika:tika-core:2.9.0'

    // AWS SDK v2 for S3 + Presigned URL
    implementation platform("software.amazon.awssdk:bom:2.31.6")
    implementation "software.amazon.awssdk:s3"

    // bcrypt
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // 외부 API Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // jOOQ
    implementation 'org.jooq:jooq'
    jooqGenerator 'mysql:mysql-connector-java:8.0.33'

    // quartz
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'com.mchange:c3p0:0.9.5.5'

    //prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //web_push
    implementation 'com.zerodeplibs:zerodep-web-push-java:2.1.2'
}

def dotenv = new Properties()
def envFile = file(".env")
if (envFile.exists()) {
    envFile.withInputStream { dotenv.load(it) }
}

def getEnvOrDotenv = { key ->
    return System.getenv(key) ?: dotenv.getProperty(key) ?: ''
}

def dbName = getEnvOrDotenv("DB_NAME")
def dbHost = getEnvOrDotenv("DB_HOST")
def dbPort = getEnvOrDotenv("DB_PORT")
def dbUser = getEnvOrDotenv("DB_USER")
def dbPassword = getEnvOrDotenv("DB_PASSWORD")
def dbUrl = "jdbc:mysql://${dbHost}:${dbPort}/${dbName}"

jooq {
    version = '3.18.6'
    // edition = JooqEdition.OSS

    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = dbUrl
                    user = dbUser
                    password = dbPassword
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = dbName
                    }
                    generate {
                        daos = true
                        pojos = true
                    }
                    target {
                        packageName = 'com.example.jooq'
                        directory = "${buildDir}/generated-src/jooq/main"
                    }
                }
            }
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}

compileJava { options.compilerArgs << '-parameters' }

tasks.withType(JavaCompile) {
    options.compilerArgs += "-parameters"
}

tasks.register("unitTest", Test) {
    useJUnitPlatform()
    systemProperty "spring.profiles.active", "test"
    include '**/*UnitTest*'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register("integrationTest", Test) {
    useJUnitPlatform()

    def ci = System.getenv("CI") == "true"
    if (ci) {
        systemProperty "spring.profiles.active", "test-int-docker"
    } else {
        systemProperty "spring.profiles.active", "test-int" // fallback
    }

    include '**/*Test*'
    exclude '**/*UnitTest*'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register("performanceTest", Test) {
    // CI 환경이면 task 실행되지 않도록
    onlyIf {
        System.getenv("CI") != "true"
    }

    useJUnitPlatform {
        includeTags "Performance"
    }

    systemProperty "spring.profiles.active", "test-int"

    testLogging {
        events "passed", "skipped", "failed"
    }
}

// 기존 test task는 비활성화
test {
    enabled = false
}
