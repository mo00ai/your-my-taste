name: CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  generate-jooq:
    runs-on: ubuntu-latest

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: taste_ci_test
      DB_USER: testuser
      DB_PASSWORD: test1234

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Docker Compose Up (PostgreSQL with init.sql)
        run: docker-compose -f docker-compose.test.ci.yml up -d test-postgres

      - name: Wait for PostgreSQL to be healthy
        run: |
          for i in {1..10}; do
            docker exec test-postgres pg_isready -U testuser && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Create .env for Jooq
        run: |
          echo "DB_HOST=localhost"     > .env
          echo "DB_PORT=5432"         >> .env
          echo "DB_NAME=taste_ci_test" >> .env
          echo "DB_USER=testuser"     >> .env
          echo "DB_PASSWORD=test1234" >> .env

      - name: Generate Jooq & Build Jar
        run: ./gradlew clean generateJooq bootJar

  build-and-test:
    runs-on: ubuntu-latest
    needs: generate-jooq

    env:
      CI: true
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: taste_ci_test
      DB_USER: testuser
      DB_PASSWORD: test1234

      # Local DB
      #      LOCAL_DB_NAME: taste_ci_test
      #      LOCAL_DB_USERNAME: testuser
      #      LOCAL_DB_PASSWORD: test1234
      #      LOCAL_ROOT_PASSWORD: root1234
      #
      #      # Redis
      #      LOCAL_REDIS_HOST: localhost
      #      LOCAL_REDIS_PORT: 6379

      # AWS S3
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      S3_REGION: ${{ secrets.S3_REGION }}
      CLOUD_FRONT_DOMAIN: ${{ secrets.CLOUD_FRONT_DOMAIN }}

      # OCR
      OCR_KEY: ${{ secrets.OCR_KEY }}

      # Naver Map API
      OCR_HOST: ${{ secrets.OCR_HOST }}
      OCR_PATH: ${{ secrets.OCR_PATH }}

      # Naver Map API
      NAVER_MAP_CLIENT_ID: ${{ secrets.NAVER_MAP_CLIENT_ID }}
      NAVER_MAP_CLIENT_SECRET: ${{ secrets.NAVER_MAP_CLIENT_SECRET }}

      # Naver Datalab API
      NAVER_DATALAB_CLIENT_ID: ${{ secrets.NAVER_DATALAB_CLIENT_ID }}
      NAVER_DATALAB_CLIENT_SECRET: ${{ secrets.NAVER_DATALAB_CLIENT_SECRET }}

      # Vapid
      VAPID_PUBLIC: ${{ secrets.VAPID_PUBLIC }}
      VAPID_PRIVATE: ${{ secrets.VAPID_PRIVATE }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Docker Compose Up
        run: docker-compose -f docker-compose.test.ci.yml up -d

      - name: Wait for PostgreSQL & Redis
        run: |
          for i in {1..10}; do
            docker exec test-postgres pg_isready -U testuser && \
            docker exec test-redis redis-cli ping | grep -q PONG && break
            echo "Waiting..."
            sleep 5
          done

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Download Jooq Code
        uses: actions/download-artifact@v4
        with:
          name: jooq-code
          path: build/generated-src/jooq

      - name: Download Built Jar
        uses: actions/download-artifact@v4
        with:
          name: built-jar
          path: build/libs

      - name: Run Unit Tests
        run: ./gradlew unitTest -x generateJooq #profiles는 build.gradle에서

      - name: Run Integration Tests
        run: ./gradlew integrationTest #profiles는 build.gradle에서
